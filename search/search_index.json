{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem vindo \u00e0 documenta\u00e7\u00e3o do projeto MyGrid O projeto MyGrid tem o objetivo de oferecer uma ferramenta computacional para representa\u00e7\u00e3o topol\u00f3gica e descritiva dos componentes da rede el\u00e9trica de distribui\u00e7\u00e3o radial , permitindo em contrapartida a realiza\u00e7\u00e3o de estudos da rede definida, tais como:s an\u00e1lise de fluxo de carga em componentes de fase; ajuste de reguladores de tens\u00e3o; c\u00e1lculo de curto-circuito em componentes de fase; estudos de impactos causados pela inser\u00e7\u00e3o de micro-gera\u00e7\u00e3o distribu\u00edda. A representa\u00e7\u00e3o que o MyGrid faz de todos os componentes da rede el\u00e9trica \u00e9 trif\u00e1sica o que permite uma representa\u00e7\u00e3o mais fiel \u00e0 realidade, permitindo o estudo de desequil\u00edbrios no sistema e a conex\u00e3o de cargas e gera\u00e7\u00f5es monof\u00e1sica e bif\u00e1sicas. O MyGrid \u00e9 desenvolvido em linguagem de programa\u00e7\u00e3o python e mantido pelo Grupo de Redes El\u00e9tricas Inteligentes da Universidade Federal do Cear\u00e1 - GREI-UFC . Come\u00e7ando do come\u00e7o Para come\u00e7ar a utilizar o MyGrid existem duas op\u00e7\u00f5es. A primeira \u00e9 utilizar o reposit\u00f3rio padr\u00e3o de pacotes python (PYPI), simplesmente digitando o comando: $ pip install mygrid Inicie uma se\u00e7\u00e3o Jupyter e digite: In [1]: import mygrid Pronto, o mygrid j\u00e1 est\u00e1 pronto para ser utilizado. A segunda op\u00e7\u00e3o \u00e9 fazer o download do c\u00f3digo fonte no seu computador, para fazer isso \u00e9 muito simples, basta abrir o terminal e digitar o seguinte comando: $ git clone https://github.com/grei-ufc/MyGrid Ap\u00f3s executar esse comando uma pasta com o nome MyGrid ser\u00e1 criada no diret\u00f3rio em que voc\u00ea se encontra. Digite: $ cd MyGrid Inicie uma se\u00e7\u00e3o Jupyter: $ jupyter qtconsole No console Jupyter digite: In [1]: import mygrid Para instalar o c\u00f3digo no seu ambiente Python padr\u00e3o ou no virtual enviroment que estiver utilizando, basta digitar no diret\u00f3rio raiz do mygrid: $ python setup.py install Se tudo tiver corrido bem nenhum erro ocorrer\u00e1 e voc\u00ea estar\u00e1 pronto para utilizar o MyGrid. Princ\u00edpios Gerais O MyGrid \u00e9 a implementa\u00e7\u00e3o computacional do conceito de RNP, ou Representa\u00e7\u00e3o N\u00f3 Profundidade, para a representa\u00e7\u00e3o da rede el\u00e9trica de distribui\u00e7\u00e3o. Ou seja, no MyGrid os conceitos de n\u00f3, profundidade, \u00e1rvore de grafo, entre outros est\u00e3o mesclados aos conceitos de rede el\u00e9trica, chave, trecho de condutor, setor el\u00e9trico, e assim por diante. Isso foi realizado por meio de duas camadas de implementa\u00e7\u00e3o computacional. Na primeira camada o MyGrid implementa dos conceitos relacionados \u00e0 RNP por meio da classe \u00c1rvore. Em uma segunda camada as classes implementadas representam os elementos da rede el\u00e9trica, como mencionados anteriormente, tendo alguns destes elementos as classes que representam a RNP como super-classes. Os conceitos aqui mencionados ser\u00e3o mais bem compreendidos por meio da montagem e utiliza\u00e7\u00e3o dos m\u00e9todos computacionais disponibilizados pelas classes afim de realizar opera\u00e7\u00f5es na rede el\u00e9trica. Al\u00e9m de disponibilizar uma representa\u00e7\u00e3o computacionalmente eficiente da rede el\u00e9trica o MyGrid disponibiliza algoritmos de an\u00e1lise tais como c\u00e1lculo de fluxo de carga e de curto-circuito. Representa\u00e7\u00e3o de Grafos Para que seja poss\u00edvel a representa\u00e7\u00e3o da rede el\u00e9trica por meio de grafos no modelo n\u00f3 profundidade primeiro \u00e9 necess\u00e1rio ter ferramentas que permitam a representa\u00e7\u00e3o gen\u00e9rica de grafos. Quem implementa essas fun\u00e7\u00f5es no MyGrid \u00e9 o m\u00f3dulo principal chamado de rnp.py . A principal classe desse m\u00f3dulo se chama Tree() e possui todos os m\u00e9todos e atributos necess\u00e1rios para a manipula\u00e7\u00e3o de uma \u00e1rvore de grafo. No exemplo abaixo \u00e9 mostrado o instanciamento de duas \u00e1rvores de grafo, tree_1 e tree_2 . Para que a estrutura rnp possa ser montada duas a\u00e7\u00f5es precisam ser realizadas, a primeira \u00e9 a passagem da estrutura da rede, isso \u00e9 feito por meio de um dicion\u00e1rio em que cada chave \u00e9 o nome de um dos n\u00f3s da \u00e1rvore e os valores s\u00e3o listas contendo os vizinhos desse n\u00f3, sem considerar orienta\u00e7\u00e3o, ainda. A segunda a\u00e7\u00e3o \u00e9 indicar qual a o n\u00f3 ser\u00e1 considerado o n\u00f3 de refer\u00eancia da \u00e1rvore, ou seja, qual o n\u00f3 ser\u00e1 o n\u00f3 raiz, isso implica que este n\u00f3 ter\u00e1 profundidade zero. nodes1 = {3: [1], 1: [3, 2, 7], 7: [1, 8, 9, 4, 10], 10: [7], 4: [7, 5, 6], 5: [4], 6: [4], 9: [7], 8: [7], 2: [1, 11, 12, 13], 11: [2], 12: [2, 13], 13: [12]} nodes2 = {14: [15], 15: [14, 16, 19], 16: [15, 17, 18], 17: [16], 18: [16], 19: [15]} # defini\u00e7\u00e3o da tree a1 tree_1 = Tree(nodes1) # ordena\u00e7\u00e3o da tree a1 tree_1.order(root=3) print(tree_1.rnp) # defini\u00e7\u00e3o da tree a2 tree_2 = Tree(nodes2) # ordena\u00e7\u00e3o da tree a2 tree_2.order(root=14) print(tree_2.rnp) Ap\u00f3s a defini\u00e7\u00e3o das \u00e1rvores de grafo e instanciados os objetos \u00e9 poss\u00edvel relizar as opera\u00e7\u00f5es de poda e de inser\u00e7\u00e3o sobre as \u00e1rvores de grafos, e dessa forma modificar suas estruturas. No c\u00f3digo abaixo \u00e9 feita uma opera\u00e7\u00e3o de poda em tree_1 na altura do n\u00f3 7 e em seguida o ramo podado \u00e9 inserido em tree_2 na altura do n\u00f3 19. # opera\u00e7\u00e3o de poda prune = tree_1.prune(7, change_rnp=True) print(prune) print(tree_1.rnp) # opera\u00e7\u00e3o de inser\u00e7\u00e3o tree_2.insert_branch(19, prune, 7) print(tree_2.rnp) Os resultados s\u00e3o mostrados abaixo: Instanciando uma rede el\u00e9trica O principal objetivo do MyGrid \u00e9 a representa\u00e7\u00e3o da rede el\u00e9trica em uma estrtura de grafos mas ao mesmo tempo com recursos de orienta\u00e7\u00e3o a objetos. Isso \u00e9 feito definindo classes que representam os elementos da rede el\u00e9trica mas que tamb\u00e9m herdam das classes definidas no m\u00f3dulo rnp.py para que seja poss\u00edvel uma representa\u00e7\u00e3o topol\u00f3gica da rede. Para exemplificar o processo de representa\u00e7\u00e3o da rede el\u00e9trica iremos considerar a rede mostrada na Figura abaixo. Nesta rede \u00e9 poss\u00edvel observar alguns componentes b\u00e1sicos de uma rede el\u00e9trica de m\u00e9dia/baixa tens\u00e3o: Transformadores; Chaves El\u00e9tricas; Trechos de Linahs; Pontos de deriva\u00e7\u00e3o e de carga; Os primeiros elementos que podem ser instanciados para a composi\u00e7\u00e3o da rede el\u00e9trica s\u00e3o as chaves existentes no sistema, para a rede exemplo temos: from mygrid.grid import Switch # switchs do alimentador 1 de S1 ch1 = Switch(name='1', state=1) ch2 = Switch(name='2', state=1) ch3 = Switch(name='3', state=1) # Switchs do alimentador 2 de S1 ch9 = Switch(name='9', state=1) ch10 = Switch(name='10', state=1) # switchs de Fronteira ch4 = Switch(name='4', state=0) ch5 = Switch(name='5', state=0) ch8 = Switch(name='8', state=0) ch11 = Switch(name='11', state=0) # switchs do alimentador de S2 ch6 = Switch(name='6', state=1) ch7 = Switch(name='7', state=1) Em seguinda podemos instanciar os transformadores de distribui\u00e7\u00e3o, ou seja, os transformadores que baixam o n\u00edvel de tens\u00e3o de linha de 13,8kV para 380V. Para isso \u00e9 necess\u00e1rio tamb\u00e9m instanciar os n\u00edveis de tens\u00e3o prim\u00e1rio e secund\u00e1rio: from mygrid.grid import TransformerModel # tensao nominal vll_mt = p2r(13.8e3, 0.0) vll_bt = p2r(380.0, 0.0) # transformers t1 = TransformerModel(name=\"T1\", primary_voltage=vll_mt, secondary_voltage=vll_bt, power=225e3, impedance=0.01 + 0.2j) Ap\u00f3s instanciar chaves e transformadores de distribui\u00e7\u00e3o o pr\u00f3ximo passo \u00e9 instanciar os n\u00f3s de carga presentes no sistema, tanto os de m\u00e9dia quanto os de baixa tens\u00e3o, isso \u00e9 feito especificando um nome , um n\u00edvel de tens\u00e3o , e um valor de carga . Tamb\u00e9m se o n\u00f3 de carga possuir interface com uma rede el\u00e9trica externa isso deve ser informador no par\u00e2metro external_grid . # Nos de carga do alimentador S1_AL1 s1 = LoadNode(name='S1', voltage=vll_mt, external_grid=eg1) a1 = LoadNode(name='A1', power=120 + 160j, voltage=vll_mt) a2 = LoadNode(name='A2', power=150.0e3 + 110.0e3j, voltage=vll_mt) a3 = LoadNode(name='A3', power=100.0e3 + 80.0e3j, voltage=vll_mt) b1 = LoadNode(name='B1', power=200.0e3 + 140.0e3j, # generation=b1_PQ, voltage=vll_mt) b2 = LoadNode(name='B2', power=150.0e3 + 110.0e3j, # generation=b2_PV, voltage=vll_mt) b3 = LoadNode(name='B3', power=100.0e3 + 80.0e3j, voltage=vll_mt) c1 = LoadNode(name='C1', power=200.0e3 + 140.0e3j, # shunt_capacitor=SC_C1, voltage=vll_mt) c2 = LoadNode(name='C2', power=150.0e3 + 110.0e3j, # generation=c2_PV, voltage=vll_mt) c3 = LoadNode(name='C3', ppa=400.0e3 + 0.0j, ppb=0.0e3 + 0.0j, ppc=0.0e3 + 0.0j, # generation=c3_PV, voltage=vll_mt) # Nos de carga do alimentador S1_AL1 f1 = LoadNode(name='F1', power=100.0e3 + 80.0e3j, voltage=vll_mt) g1 = LoadNode(name='G1', power=100.0e3 + 80.0e3j, voltage=vll_mt) # Nos de carga do alimentador S2_AL1 s2 = LoadNode(name='S2', voltage=vll_mt, external_grid=eg1) d1 = LoadNode(name='D1', power=200.0e3 + 160.0e3j, voltage=vll_mt) d2 = LoadNode(name='D2', power=900.0e3 + 40.0e3j, voltage=vll_mt) d3 = LoadNode(name='D3', power=100.0e3 + 80.0e3j, voltage=vll_mt,) e1 = LoadNode(name='E1', power=100.0e3 + 40.0e3j, voltage=vll_mt) e2 = LoadNode(name='E2', power=110.0e3 + 70.0e3j, voltage=vll_mt) e3 = LoadNode(name='E3', power=150.0e3 + 80.0e3j, voltage=vll_mt) # Subgrid load-nodes connecteds to A1 aa1 = LoadNode(name='AA1', power=0.0 + 0.0j, voltage=vll_bt) aa2 = LoadNode(name='AA2', power=20.0e3 + 5.0e3j, voltage=vll_bt) aa3 = LoadNode(name='AA3', power=20.0e3 + 5.0e3j, voltage=vll_bt) Ap\u00f3s serem definidos os n\u00f3s de carga da rede el\u00e9trica, \u00e9 preciso especificar os seguimentos de linha ou transformadores que est\u00e3o entre dois n\u00f3s, definindo assim a topologia da rede. O primeiro procedimento para isso \u00e9 a defini\u00e7\u00e3o dos condutores que ser\u00e3o utilizados nos seguimentos de linha. Para isso o MyGrid possui uma tabela de condutores pr\u00e9-definidos conforme especificado nos ap\u00eandices do livro Distribution System Modeling and Analysis de William H. Kersting . A lista dos condutores com seus respectivos c\u00f3digos pode ser visualizada em conductors.json Tamb\u00e9m \u00e9 necess\u00e1rio definir um modelo de linha especificando os condutores da linha e sua configura\u00e7\u00e3o geom\u00e9trica na estrutura utilizada. Para este exemplo s\u00e3o utilizados dois tipos de modelos de linha, um para a rede de m\u00e9dia tens\u00e3o e outro para a rede de baixa tens\u00e3o. Tamb\u00e9m s\u00e3o especificados os condutores ids dos condutires de fase e de neutro para a m\u00e9dia e a baixa tens\u00e3o: phase_conduct = Conductor(id=57) neutral_conduct = Conductor(id=44) line_model_a = LineModel(loc_a=0.0 + 29.0j, loc_b=2.5 + 29.0j, loc_c=7.0 + 29.0j, loc_n=4.0 + 25.0j, conductor=phase_conduct, neutral_conductor=neutral_conduct, neutral=False) phase_conduct_bt = Conductor(id=32) line_model_b = LineModel(loc_a=0.0 + 29.0j, loc_b=2.5 + 29.0j, loc_c=7.0 + 29.0j, loc_n=4.0 + 25.0j, conductor=phase_conduct_bt, neutral_conductor=neutral_conduct, neutral=True) Especificados os modelos de linha \u00e9 poss\u00edvel pass\u00e1-los como par\u00e2metro da classe que ir\u00e1 especificar a liga\u00e7\u00e3o entre os n\u00f3s, no MyGrid essa classe tem o nome de Section() e recebe como par\u00e2metros um nome, os n\u00f3s que est\u00e3o em seus extremos, caso haja chave no seguimento esta \u00e9 informada, o modelo de linha ou de transformador, e caso seja linha, o comprimento do seguimento de linha: # Trechos do alimentador S1_AL1 s1_a2 = Section(name='S1A2', n1=s1, n2=a2, switch=ch1, line_model=line_model_a, length=4) a2_a1 = Section(name='A2A1', n1=a2, n2=a1, line_model=line_model_a, length=4) a2_a3 = Section(name='A2A3', n1=a2, n2=a3, line_model=line_model_a, length=4) a2_c1 = Section(name='A2C1', n1=a2, n2=c1, switch=ch3, line_model=line_model_a, length=4) c1_c2 = Section(name='C1C2', n1=c1, n2=c2, line_model=line_model_a, length=4) c1_c3 = Section(name='C1C3', n1=c1, n2=c3, line_model=line_model_a, length=4) a3_b1 = Section(name='A3B1', n1=a3, n2=b1, switch=ch2, line_model=line_model_a, length=4) b1_b2 = Section(name='B1B2', n1=b1, n2=b2, line_model=line_model_a, length=4) b2_b3 = Section(name='B2B3', n1=b2, n2=b3, line_model=line_model_a, length=4) # Trechos do alimentador S1_AL2 s1_f1 = Section(name='S1F1', n1=s1, n2=f1, switch=ch9, line_model=line_model_a, length=1.0) f1_g1 = Section(name='F1G1', n1=f1, n2=g1, switch=ch10, line_model=line_model_a, length=1.0) g1_d2 = Section(name='G1D2', n1=g1, n2=d2, switch=ch11, line_model=line_model_a, length=1.0) # Trechos do alimentador S2_AL1 s2_d1 = Section(name='S2D1', n1=s2, n2=d1, switch=ch6, line_model=line_model_a, length=1.0) d1_d2 = Section(name='D1D2', n1=d1, n2=d2, line_model=line_model_a, length=1.0) d1_d3 = Section(name='D1D3', n1=d1, n2=d3, line_model=line_model_a, length=1.0) d1_e1 = Section(name='D1E1', n1=d1, n2=e1, switch=ch7, line_model=line_model_a, length=1.0) e1_e2 = Section(name='E1E2', n1=e1, n2=e2, line_model=line_model_a, length=1.0) e1_e3 = Section(name='E1E3', n1=e1, n2=e3, line_model=line_model_a, length=1.0) # Sections de encontro de alimentador c3_e3 = Section(name='C3E3', n1=c3, n2=e3, switch=ch8, line_model=line_model_a, length=1.0) b2_e2 = Section(name='B2E2', n1=b2, n2=e2, switch=ch4, line_model=line_model_a, length=1.0) b3_c3 = Section(name='B3C3', n1=b3, n2=c3, switch=ch5, line_model=line_model_a, length=0.5) # subgrid sections connecteds to A1 a1_aa1 = Section(name='A1AA1', n1=a1, n2=aa1, transformer=t1, length=3.0e-2) aa1_aa2 = Section(name='AA1AA2', n1=aa1, n2=aa2, line_model=line_model_b, length=3.0e-2) aa1_aa3 = Section(name='AA2AA3', n1=aa1, n2=aa3, line_model=line_model_b, length=3.0e-2)","title":"Inicio"},{"location":"#bem-vindo-a-documentacao-do-projeto-mygrid","text":"O projeto MyGrid tem o objetivo de oferecer uma ferramenta computacional para representa\u00e7\u00e3o topol\u00f3gica e descritiva dos componentes da rede el\u00e9trica de distribui\u00e7\u00e3o radial , permitindo em contrapartida a realiza\u00e7\u00e3o de estudos da rede definida, tais como:s an\u00e1lise de fluxo de carga em componentes de fase; ajuste de reguladores de tens\u00e3o; c\u00e1lculo de curto-circuito em componentes de fase; estudos de impactos causados pela inser\u00e7\u00e3o de micro-gera\u00e7\u00e3o distribu\u00edda. A representa\u00e7\u00e3o que o MyGrid faz de todos os componentes da rede el\u00e9trica \u00e9 trif\u00e1sica o que permite uma representa\u00e7\u00e3o mais fiel \u00e0 realidade, permitindo o estudo de desequil\u00edbrios no sistema e a conex\u00e3o de cargas e gera\u00e7\u00f5es monof\u00e1sica e bif\u00e1sicas. O MyGrid \u00e9 desenvolvido em linguagem de programa\u00e7\u00e3o python e mantido pelo Grupo de Redes El\u00e9tricas Inteligentes da Universidade Federal do Cear\u00e1 - GREI-UFC .","title":"Bem vindo \u00e0 documenta\u00e7\u00e3o do projeto MyGrid"},{"location":"#comecando-do-comeco","text":"Para come\u00e7ar a utilizar o MyGrid existem duas op\u00e7\u00f5es. A primeira \u00e9 utilizar o reposit\u00f3rio padr\u00e3o de pacotes python (PYPI), simplesmente digitando o comando: $ pip install mygrid Inicie uma se\u00e7\u00e3o Jupyter e digite: In [1]: import mygrid Pronto, o mygrid j\u00e1 est\u00e1 pronto para ser utilizado. A segunda op\u00e7\u00e3o \u00e9 fazer o download do c\u00f3digo fonte no seu computador, para fazer isso \u00e9 muito simples, basta abrir o terminal e digitar o seguinte comando: $ git clone https://github.com/grei-ufc/MyGrid Ap\u00f3s executar esse comando uma pasta com o nome MyGrid ser\u00e1 criada no diret\u00f3rio em que voc\u00ea se encontra. Digite: $ cd MyGrid Inicie uma se\u00e7\u00e3o Jupyter: $ jupyter qtconsole No console Jupyter digite: In [1]: import mygrid Para instalar o c\u00f3digo no seu ambiente Python padr\u00e3o ou no virtual enviroment que estiver utilizando, basta digitar no diret\u00f3rio raiz do mygrid: $ python setup.py install Se tudo tiver corrido bem nenhum erro ocorrer\u00e1 e voc\u00ea estar\u00e1 pronto para utilizar o MyGrid.","title":"Come\u00e7ando do come\u00e7o"},{"location":"#principios-gerais","text":"O MyGrid \u00e9 a implementa\u00e7\u00e3o computacional do conceito de RNP, ou Representa\u00e7\u00e3o N\u00f3 Profundidade, para a representa\u00e7\u00e3o da rede el\u00e9trica de distribui\u00e7\u00e3o. Ou seja, no MyGrid os conceitos de n\u00f3, profundidade, \u00e1rvore de grafo, entre outros est\u00e3o mesclados aos conceitos de rede el\u00e9trica, chave, trecho de condutor, setor el\u00e9trico, e assim por diante. Isso foi realizado por meio de duas camadas de implementa\u00e7\u00e3o computacional. Na primeira camada o MyGrid implementa dos conceitos relacionados \u00e0 RNP por meio da classe \u00c1rvore. Em uma segunda camada as classes implementadas representam os elementos da rede el\u00e9trica, como mencionados anteriormente, tendo alguns destes elementos as classes que representam a RNP como super-classes. Os conceitos aqui mencionados ser\u00e3o mais bem compreendidos por meio da montagem e utiliza\u00e7\u00e3o dos m\u00e9todos computacionais disponibilizados pelas classes afim de realizar opera\u00e7\u00f5es na rede el\u00e9trica. Al\u00e9m de disponibilizar uma representa\u00e7\u00e3o computacionalmente eficiente da rede el\u00e9trica o MyGrid disponibiliza algoritmos de an\u00e1lise tais como c\u00e1lculo de fluxo de carga e de curto-circuito.","title":"Princ\u00edpios Gerais"},{"location":"#representacao-de-grafos","text":"Para que seja poss\u00edvel a representa\u00e7\u00e3o da rede el\u00e9trica por meio de grafos no modelo n\u00f3 profundidade primeiro \u00e9 necess\u00e1rio ter ferramentas que permitam a representa\u00e7\u00e3o gen\u00e9rica de grafos. Quem implementa essas fun\u00e7\u00f5es no MyGrid \u00e9 o m\u00f3dulo principal chamado de rnp.py . A principal classe desse m\u00f3dulo se chama Tree() e possui todos os m\u00e9todos e atributos necess\u00e1rios para a manipula\u00e7\u00e3o de uma \u00e1rvore de grafo. No exemplo abaixo \u00e9 mostrado o instanciamento de duas \u00e1rvores de grafo, tree_1 e tree_2 . Para que a estrutura rnp possa ser montada duas a\u00e7\u00f5es precisam ser realizadas, a primeira \u00e9 a passagem da estrutura da rede, isso \u00e9 feito por meio de um dicion\u00e1rio em que cada chave \u00e9 o nome de um dos n\u00f3s da \u00e1rvore e os valores s\u00e3o listas contendo os vizinhos desse n\u00f3, sem considerar orienta\u00e7\u00e3o, ainda. A segunda a\u00e7\u00e3o \u00e9 indicar qual a o n\u00f3 ser\u00e1 considerado o n\u00f3 de refer\u00eancia da \u00e1rvore, ou seja, qual o n\u00f3 ser\u00e1 o n\u00f3 raiz, isso implica que este n\u00f3 ter\u00e1 profundidade zero. nodes1 = {3: [1], 1: [3, 2, 7], 7: [1, 8, 9, 4, 10], 10: [7], 4: [7, 5, 6], 5: [4], 6: [4], 9: [7], 8: [7], 2: [1, 11, 12, 13], 11: [2], 12: [2, 13], 13: [12]} nodes2 = {14: [15], 15: [14, 16, 19], 16: [15, 17, 18], 17: [16], 18: [16], 19: [15]} # defini\u00e7\u00e3o da tree a1 tree_1 = Tree(nodes1) # ordena\u00e7\u00e3o da tree a1 tree_1.order(root=3) print(tree_1.rnp) # defini\u00e7\u00e3o da tree a2 tree_2 = Tree(nodes2) # ordena\u00e7\u00e3o da tree a2 tree_2.order(root=14) print(tree_2.rnp) Ap\u00f3s a defini\u00e7\u00e3o das \u00e1rvores de grafo e instanciados os objetos \u00e9 poss\u00edvel relizar as opera\u00e7\u00f5es de poda e de inser\u00e7\u00e3o sobre as \u00e1rvores de grafos, e dessa forma modificar suas estruturas. No c\u00f3digo abaixo \u00e9 feita uma opera\u00e7\u00e3o de poda em tree_1 na altura do n\u00f3 7 e em seguida o ramo podado \u00e9 inserido em tree_2 na altura do n\u00f3 19. # opera\u00e7\u00e3o de poda prune = tree_1.prune(7, change_rnp=True) print(prune) print(tree_1.rnp) # opera\u00e7\u00e3o de inser\u00e7\u00e3o tree_2.insert_branch(19, prune, 7) print(tree_2.rnp) Os resultados s\u00e3o mostrados abaixo:","title":"Representa\u00e7\u00e3o de Grafos"},{"location":"#instanciando-uma-rede-eletrica","text":"O principal objetivo do MyGrid \u00e9 a representa\u00e7\u00e3o da rede el\u00e9trica em uma estrtura de grafos mas ao mesmo tempo com recursos de orienta\u00e7\u00e3o a objetos. Isso \u00e9 feito definindo classes que representam os elementos da rede el\u00e9trica mas que tamb\u00e9m herdam das classes definidas no m\u00f3dulo rnp.py para que seja poss\u00edvel uma representa\u00e7\u00e3o topol\u00f3gica da rede. Para exemplificar o processo de representa\u00e7\u00e3o da rede el\u00e9trica iremos considerar a rede mostrada na Figura abaixo. Nesta rede \u00e9 poss\u00edvel observar alguns componentes b\u00e1sicos de uma rede el\u00e9trica de m\u00e9dia/baixa tens\u00e3o: Transformadores; Chaves El\u00e9tricas; Trechos de Linahs; Pontos de deriva\u00e7\u00e3o e de carga; Os primeiros elementos que podem ser instanciados para a composi\u00e7\u00e3o da rede el\u00e9trica s\u00e3o as chaves existentes no sistema, para a rede exemplo temos: from mygrid.grid import Switch # switchs do alimentador 1 de S1 ch1 = Switch(name='1', state=1) ch2 = Switch(name='2', state=1) ch3 = Switch(name='3', state=1) # Switchs do alimentador 2 de S1 ch9 = Switch(name='9', state=1) ch10 = Switch(name='10', state=1) # switchs de Fronteira ch4 = Switch(name='4', state=0) ch5 = Switch(name='5', state=0) ch8 = Switch(name='8', state=0) ch11 = Switch(name='11', state=0) # switchs do alimentador de S2 ch6 = Switch(name='6', state=1) ch7 = Switch(name='7', state=1) Em seguinda podemos instanciar os transformadores de distribui\u00e7\u00e3o, ou seja, os transformadores que baixam o n\u00edvel de tens\u00e3o de linha de 13,8kV para 380V. Para isso \u00e9 necess\u00e1rio tamb\u00e9m instanciar os n\u00edveis de tens\u00e3o prim\u00e1rio e secund\u00e1rio: from mygrid.grid import TransformerModel # tensao nominal vll_mt = p2r(13.8e3, 0.0) vll_bt = p2r(380.0, 0.0) # transformers t1 = TransformerModel(name=\"T1\", primary_voltage=vll_mt, secondary_voltage=vll_bt, power=225e3, impedance=0.01 + 0.2j) Ap\u00f3s instanciar chaves e transformadores de distribui\u00e7\u00e3o o pr\u00f3ximo passo \u00e9 instanciar os n\u00f3s de carga presentes no sistema, tanto os de m\u00e9dia quanto os de baixa tens\u00e3o, isso \u00e9 feito especificando um nome , um n\u00edvel de tens\u00e3o , e um valor de carga . Tamb\u00e9m se o n\u00f3 de carga possuir interface com uma rede el\u00e9trica externa isso deve ser informador no par\u00e2metro external_grid . # Nos de carga do alimentador S1_AL1 s1 = LoadNode(name='S1', voltage=vll_mt, external_grid=eg1) a1 = LoadNode(name='A1', power=120 + 160j, voltage=vll_mt) a2 = LoadNode(name='A2', power=150.0e3 + 110.0e3j, voltage=vll_mt) a3 = LoadNode(name='A3', power=100.0e3 + 80.0e3j, voltage=vll_mt) b1 = LoadNode(name='B1', power=200.0e3 + 140.0e3j, # generation=b1_PQ, voltage=vll_mt) b2 = LoadNode(name='B2', power=150.0e3 + 110.0e3j, # generation=b2_PV, voltage=vll_mt) b3 = LoadNode(name='B3', power=100.0e3 + 80.0e3j, voltage=vll_mt) c1 = LoadNode(name='C1', power=200.0e3 + 140.0e3j, # shunt_capacitor=SC_C1, voltage=vll_mt) c2 = LoadNode(name='C2', power=150.0e3 + 110.0e3j, # generation=c2_PV, voltage=vll_mt) c3 = LoadNode(name='C3', ppa=400.0e3 + 0.0j, ppb=0.0e3 + 0.0j, ppc=0.0e3 + 0.0j, # generation=c3_PV, voltage=vll_mt) # Nos de carga do alimentador S1_AL1 f1 = LoadNode(name='F1', power=100.0e3 + 80.0e3j, voltage=vll_mt) g1 = LoadNode(name='G1', power=100.0e3 + 80.0e3j, voltage=vll_mt) # Nos de carga do alimentador S2_AL1 s2 = LoadNode(name='S2', voltage=vll_mt, external_grid=eg1) d1 = LoadNode(name='D1', power=200.0e3 + 160.0e3j, voltage=vll_mt) d2 = LoadNode(name='D2', power=900.0e3 + 40.0e3j, voltage=vll_mt) d3 = LoadNode(name='D3', power=100.0e3 + 80.0e3j, voltage=vll_mt,) e1 = LoadNode(name='E1', power=100.0e3 + 40.0e3j, voltage=vll_mt) e2 = LoadNode(name='E2', power=110.0e3 + 70.0e3j, voltage=vll_mt) e3 = LoadNode(name='E3', power=150.0e3 + 80.0e3j, voltage=vll_mt) # Subgrid load-nodes connecteds to A1 aa1 = LoadNode(name='AA1', power=0.0 + 0.0j, voltage=vll_bt) aa2 = LoadNode(name='AA2', power=20.0e3 + 5.0e3j, voltage=vll_bt) aa3 = LoadNode(name='AA3', power=20.0e3 + 5.0e3j, voltage=vll_bt) Ap\u00f3s serem definidos os n\u00f3s de carga da rede el\u00e9trica, \u00e9 preciso especificar os seguimentos de linha ou transformadores que est\u00e3o entre dois n\u00f3s, definindo assim a topologia da rede. O primeiro procedimento para isso \u00e9 a defini\u00e7\u00e3o dos condutores que ser\u00e3o utilizados nos seguimentos de linha. Para isso o MyGrid possui uma tabela de condutores pr\u00e9-definidos conforme especificado nos ap\u00eandices do livro Distribution System Modeling and Analysis de William H. Kersting . A lista dos condutores com seus respectivos c\u00f3digos pode ser visualizada em conductors.json Tamb\u00e9m \u00e9 necess\u00e1rio definir um modelo de linha especificando os condutores da linha e sua configura\u00e7\u00e3o geom\u00e9trica na estrutura utilizada. Para este exemplo s\u00e3o utilizados dois tipos de modelos de linha, um para a rede de m\u00e9dia tens\u00e3o e outro para a rede de baixa tens\u00e3o. Tamb\u00e9m s\u00e3o especificados os condutores ids dos condutires de fase e de neutro para a m\u00e9dia e a baixa tens\u00e3o: phase_conduct = Conductor(id=57) neutral_conduct = Conductor(id=44) line_model_a = LineModel(loc_a=0.0 + 29.0j, loc_b=2.5 + 29.0j, loc_c=7.0 + 29.0j, loc_n=4.0 + 25.0j, conductor=phase_conduct, neutral_conductor=neutral_conduct, neutral=False) phase_conduct_bt = Conductor(id=32) line_model_b = LineModel(loc_a=0.0 + 29.0j, loc_b=2.5 + 29.0j, loc_c=7.0 + 29.0j, loc_n=4.0 + 25.0j, conductor=phase_conduct_bt, neutral_conductor=neutral_conduct, neutral=True) Especificados os modelos de linha \u00e9 poss\u00edvel pass\u00e1-los como par\u00e2metro da classe que ir\u00e1 especificar a liga\u00e7\u00e3o entre os n\u00f3s, no MyGrid essa classe tem o nome de Section() e recebe como par\u00e2metros um nome, os n\u00f3s que est\u00e3o em seus extremos, caso haja chave no seguimento esta \u00e9 informada, o modelo de linha ou de transformador, e caso seja linha, o comprimento do seguimento de linha: # Trechos do alimentador S1_AL1 s1_a2 = Section(name='S1A2', n1=s1, n2=a2, switch=ch1, line_model=line_model_a, length=4) a2_a1 = Section(name='A2A1', n1=a2, n2=a1, line_model=line_model_a, length=4) a2_a3 = Section(name='A2A3', n1=a2, n2=a3, line_model=line_model_a, length=4) a2_c1 = Section(name='A2C1', n1=a2, n2=c1, switch=ch3, line_model=line_model_a, length=4) c1_c2 = Section(name='C1C2', n1=c1, n2=c2, line_model=line_model_a, length=4) c1_c3 = Section(name='C1C3', n1=c1, n2=c3, line_model=line_model_a, length=4) a3_b1 = Section(name='A3B1', n1=a3, n2=b1, switch=ch2, line_model=line_model_a, length=4) b1_b2 = Section(name='B1B2', n1=b1, n2=b2, line_model=line_model_a, length=4) b2_b3 = Section(name='B2B3', n1=b2, n2=b3, line_model=line_model_a, length=4) # Trechos do alimentador S1_AL2 s1_f1 = Section(name='S1F1', n1=s1, n2=f1, switch=ch9, line_model=line_model_a, length=1.0) f1_g1 = Section(name='F1G1', n1=f1, n2=g1, switch=ch10, line_model=line_model_a, length=1.0) g1_d2 = Section(name='G1D2', n1=g1, n2=d2, switch=ch11, line_model=line_model_a, length=1.0) # Trechos do alimentador S2_AL1 s2_d1 = Section(name='S2D1', n1=s2, n2=d1, switch=ch6, line_model=line_model_a, length=1.0) d1_d2 = Section(name='D1D2', n1=d1, n2=d2, line_model=line_model_a, length=1.0) d1_d3 = Section(name='D1D3', n1=d1, n2=d3, line_model=line_model_a, length=1.0) d1_e1 = Section(name='D1E1', n1=d1, n2=e1, switch=ch7, line_model=line_model_a, length=1.0) e1_e2 = Section(name='E1E2', n1=e1, n2=e2, line_model=line_model_a, length=1.0) e1_e3 = Section(name='E1E3', n1=e1, n2=e3, line_model=line_model_a, length=1.0) # Sections de encontro de alimentador c3_e3 = Section(name='C3E3', n1=c3, n2=e3, switch=ch8, line_model=line_model_a, length=1.0) b2_e2 = Section(name='B2E2', n1=b2, n2=e2, switch=ch4, line_model=line_model_a, length=1.0) b3_c3 = Section(name='B3C3', n1=b3, n2=c3, switch=ch5, line_model=line_model_a, length=0.5) # subgrid sections connecteds to A1 a1_aa1 = Section(name='A1AA1', n1=a1, n2=aa1, transformer=t1, length=3.0e-2) aa1_aa2 = Section(name='AA1AA2', n1=aa1, n2=aa2, line_model=line_model_b, length=3.0e-2) aa1_aa3 = Section(name='AA2AA3', n1=aa1, n2=aa3, line_model=line_model_b, length=3.0e-2)","title":"Instanciando uma rede el\u00e9trica"},{"location":"about/","text":"Sobre o projeto MyGrid O projeto MyGrid tem o objetivo de oferecer uma ferramenta computacional para representa\u00e7\u00e3o e realiza\u00e7\u00e3o de estudos da rede el\u00e9trica de distribui\u00e7\u00e3o. O MyGrid \u00e9 desenvolvido em linguagem de programa\u00e7\u00e3o python e mantido pelo Grupo de redes el\u00e9tricas inteligentes da Universidade Federal do Cear\u00e1.","title":"Sobre"},{"location":"about/#sobre-o-projeto-mygrid","text":"O projeto MyGrid tem o objetivo de oferecer uma ferramenta computacional para representa\u00e7\u00e3o e realiza\u00e7\u00e3o de estudos da rede el\u00e9trica de distribui\u00e7\u00e3o. O MyGrid \u00e9 desenvolvido em linguagem de programa\u00e7\u00e3o python e mantido pelo Grupo de redes el\u00e9tricas inteligentes da Universidade Federal do Cear\u00e1.","title":"Sobre o projeto MyGrid"},{"location":"conductors/","text":"[ { \"id\": 0, \"size\": \"1\", \"stranding\": \"None\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.355, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00418, \"unity\": \"feet\" }, \"resistence\": { \"value\": 1.38, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 200, \"unity\": \"amps\" } }, { \"id\": 1, \"size\": \"1\", \"stranding\": \"7 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.328, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00992, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.765, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 270, \"unity\": \"amps\" } }, { \"id\": 2, \"size\": \"1\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.328, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00991, \"unity\": \"feet\" }, \"resistence\": { \"value\": 1.224, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 177, \"unity\": \"amps\" } }, { \"id\": 3, \"size\": \"2\", \"stranding\": \"6/1\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.316, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00418, \"unity\": \"feet\" }, \"resistence\": { \"value\": 1.69, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 180, \"unity\": \"amps\" } }, { \"id\": 4, \"size\": \"2\", \"stranding\": \"7 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.292, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00883, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.964, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 230, \"unity\": \"amps\" } }, { \"id\": 5, \"size\": \"2\", \"stranding\": \"7/1\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.325, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00504, \"unity\": \"feet\" }, \"resistence\": { \"value\": 1.65, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 180, \"unity\": \"amps\" } }, { \"id\": 6, \"size\": \"2\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.258, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00836, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.945, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 220, \"unity\": \"amps\" } }, { \"id\": 7, \"size\": \"2\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.292, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00883, \"unity\": \"feet\" }, \"resistence\": { \"value\": 1.541, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 156, \"unity\": \"amps\" } }, { \"id\": 8, \"size\": \"3\", \"stranding\": \"6/1\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.281, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0043, \"unity\": \"feet\" }, \"resistence\": { \"value\": 2.07, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 160, \"unity\": \"amps\" } }, { \"id\": 9, \"size\": \"3\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.229, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00745, \"unity\": \"feet\" }, \"resistence\": { \"value\": 1.192, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 190, \"unity\": \"amps\" } }, { \"id\": 10, \"size\": \"4\", \"stranding\": \"6/1\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.25, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00437, \"unity\": \"feet\" }, \"resistence\": { \"value\": 2.57, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 140, \"unity\": \"amps\" } }, { \"id\": 11, \"size\": \"4\", \"stranding\": \"7/1\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.257, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00452, \"unity\": \"feet\" }, \"resistence\": { \"value\": 2.55, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 140, \"unity\": \"amps\" } }, { \"id\": 12, \"size\": \"4\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.204, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00663, \"unity\": \"feet\" }, \"resistence\": { \"value\": 1.503, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 170, \"unity\": \"amps\" } }, { \"id\": 13, \"size\": \"4\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.232, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.007, \"unity\": \"feet\" }, \"resistence\": { \"value\": 2.453, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 90, \"unity\": \"amps\" } }, { \"id\": 14, \"size\": \"5\", \"stranding\": \"6/1\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.223, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00416, \"unity\": \"feet\" }, \"resistence\": { \"value\": 3.18, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 120, \"unity\": \"amps\" } }, { \"id\": 15, \"size\": \"5\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.1819, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0059, \"unity\": \"feet\" }, \"resistence\": { \"value\": 1.895, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 140, \"unity\": \"amps\" } }, { \"id\": 16, \"size\": \"6\", \"stranding\": \"6/1\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.198, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00394, \"unity\": \"feet\" }, \"resistence\": { \"value\": 3.98, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 100, \"unity\": \"amps\" } }, { \"id\": 17, \"size\": \"6\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.162, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00526, \"unity\": \"feet\" }, \"resistence\": { \"value\": 2.39, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 120, \"unity\": \"amps\" } }, { \"id\": 18, \"size\": \"6\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.184, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00555, \"unity\": \"feet\" }, \"resistence\": { \"value\": 3.903, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 65, \"unity\": \"amps\" } }, { \"id\": 19, \"size\": \"7\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.1443, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00468, \"unity\": \"feet\" }, \"resistence\": { \"value\": 3.01, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 110, \"unity\": \"amps\" } }, { \"id\": 20, \"size\": \"8\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.1285, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00416, \"unity\": \"feet\" }, \"resistence\": { \"value\": 3.8, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 90, \"unity\": \"amps\" } }, { \"id\": 21, \"size\": \"9\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.1144, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00371, \"unity\": \"feet\" }, \"resistence\": { \"value\": 4.6758, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 80, \"unity\": \"amps\" } }, { \"id\": 22, \"size\": \"10\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.1019, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0033, \"unity\": \"feet\" }, \"resistence\": { \"value\": 5.9026, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 75, \"unity\": \"amps\" } }, { \"id\": 23, \"size\": \"12\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.0808, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00262, \"unity\": \"feet\" }, \"resistence\": { \"value\": 9.3747, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 40, \"unity\": \"amps\" } }, { \"id\": 24, \"size\": \"14\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.0641, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00208, \"unity\": \"feet\" }, \"resistence\": { \"value\": 14.8722, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 20, \"unity\": \"amps\" } }, { \"id\": 25, \"size\": \"16\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.0508, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00164, \"unity\": \"feet\" }, \"resistence\": { \"value\": 23.7262, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 10, \"unity\": \"amps\" } }, { \"id\": 26, \"size\": \"18\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.0403, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0013, \"unity\": \"feet\" }, \"resistence\": { \"value\": 37.6726, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 5, \"unity\": \"amps\" } }, { \"id\": 27, \"size\": \"19\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.0359, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00116, \"unity\": \"feet\" }, \"resistence\": { \"value\": 47.5103, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 4, \"unity\": \"amps\" } }, { \"id\": 28, \"size\": \"20\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.032, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00103, \"unity\": \"feet\" }, \"resistence\": { \"value\": 59.684, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 3, \"unity\": \"amps\" } }, { \"id\": 29, \"size\": \"22\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.0253, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00082, \"unity\": \"feet\" }, \"resistence\": { \"value\": 95.4835, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 2, \"unity\": \"amps\" } }, { \"id\": 30, \"size\": \"24\", \"stranding\": \"AWG SLD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.0201, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00065, \"unity\": \"feet\" }, \"resistence\": { \"value\": 151.616, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 1, \"unity\": \"amps\" } }, { \"id\": 31, \"size\": \"1/0\", \"stranding\": \"None\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.398, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00446, \"unity\": \"feet\" }, \"resistence\": { \"value\": 1.12, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 230, \"unity\": \"amps\" } }, { \"id\": 32, \"size\": \"1/0\", \"stranding\": \"7 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.368, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.01113, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.607, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 310, \"unity\": \"amps\" } }, { \"id\": 33, \"size\": \"1/0\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.368, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0111, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.97, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 202, \"unity\": \"amps\" } }, { \"id\": 34, \"size\": \"2/0\", \"stranding\": \"None\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.447, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0051, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.895, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 270, \"unity\": \"amps\" } }, { \"id\": 35, \"size\": \"2/0\", \"stranding\": \"7 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.414, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.01252, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.481, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 360, \"unity\": \"amps\" } }, { \"id\": 36, \"size\": \"2/0\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.414, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0125, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.769, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 230, \"unity\": \"amps\" } }, { \"id\": 37, \"size\": \"3/0\", \"stranding\": \"12 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.492, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.01559, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.382, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 420, \"unity\": \"amps\" } }, { \"id\": 38, \"size\": \"3/0\", \"stranding\": \"6/1\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.502, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.006, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.723, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 300, \"unity\": \"amps\" } }, { \"id\": 39, \"size\": \"3/0\", \"stranding\": \"7 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.464, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.01404, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.382, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 420, \"unity\": \"amps\" } }, { \"id\": 40, \"size\": \"3/0\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.464, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.014, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.611, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 263, \"unity\": \"amps\" } }, { \"id\": 41, \"size\": \"3/8\", \"stranding\": \"INCH STE\", \"material\": \"Steel\", \"diameter\": { \"value\": 0.375, \"unity\": \"inch\" }, \"gmr\": { \"value\": 1e-05, \"unity\": \"feet\" }, \"resistence\": { \"value\": 4.3, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 150, \"unity\": \"amps\" } }, { \"id\": 42, \"size\": \"4/0\", \"stranding\": \"12 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.552, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0175, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.303, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 490, \"unity\": \"amps\" } }, { \"id\": 43, \"size\": \"4/0\", \"stranding\": \"19 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.528, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.01668, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.303, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 480, \"unity\": \"amps\" } }, { \"id\": 44, \"size\": \"4/0\", \"stranding\": \"6/1\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.563, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.00814, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.592, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 340, \"unity\": \"amps\" } }, { \"id\": 45, \"size\": \"4/0\", \"stranding\": \"7 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.522, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.01579, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.303, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 480, \"unity\": \"amps\" } }, { \"id\": 46, \"size\": \"4/0\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.522, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0158, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.484, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 299, \"unity\": \"amps\" } }, { \"id\": 47, \"size\": \"250000\", \"stranding\": \"12 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.6, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.01902, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.257, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 540, \"unity\": \"amps\" } }, { \"id\": 48, \"size\": \"250000\", \"stranding\": \"19 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.574, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.01813, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.257, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 540, \"unity\": \"amps\" } }, { \"id\": 49, \"size\": \"250000\", \"stranding\": \"CON LAY\", \"material\": \"AA\", \"diameter\": { \"value\": 0.567, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0171, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.41, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 329, \"unity\": \"amps\" } }, { \"id\": 50, \"size\": \"266800\", \"stranding\": \"26/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.642, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0217, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.385, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 460, \"unity\": \"amps\" } }, { \"id\": 51, \"size\": \"266800\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.586, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0177, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.384, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 320, \"unity\": \"amps\" } }, { \"id\": 52, \"size\": \"300000\", \"stranding\": \"12 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.657, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0208, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.215, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 610, \"unity\": \"amps\" } }, { \"id\": 53, \"size\": \"300000\", \"stranding\": \"19 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.629, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.01987, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.215, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 610, \"unity\": \"amps\" } }, { \"id\": 54, \"size\": \"300000\", \"stranding\": \"26/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.68, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.023, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.342, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 490, \"unity\": \"amps\" } }, { \"id\": 55, \"size\": \"300000\", \"stranding\": \"30/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.7, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0241, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.342, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 500, \"unity\": \"amps\" } }, { \"id\": 56, \"size\": \"300000\", \"stranding\": \"CON LAY\", \"material\": \"AA\", \"diameter\": { \"value\": 0.629, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0198, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.342, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 350, \"unity\": \"amps\" } }, { \"id\": 57, \"size\": \"336400\", \"stranding\": \"26/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.721, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0244, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.306, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 530, \"unity\": \"amps\" } }, { \"id\": 58, \"size\": \"336400\", \"stranding\": \"30/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.741, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0255, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.306, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 530, \"unity\": \"amps\" } }, { \"id\": 59, \"size\": \"336400\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.666, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.021, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.305, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 410, \"unity\": \"amps\" } }, { \"id\": 60, \"size\": \"350000\", \"stranding\": \"12 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.71, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0225, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1845, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 670, \"unity\": \"amps\" } }, { \"id\": 61, \"size\": \"350000\", \"stranding\": \"19 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.679, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0214, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1845, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 670, \"unity\": \"amps\" } }, { \"id\": 62, \"size\": \"350000\", \"stranding\": \"CON LAY\", \"material\": \"AA\", \"diameter\": { \"value\": 0.679, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0214, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.294, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 399, \"unity\": \"amps\" } }, { \"id\": 63, \"size\": \"397500\", \"stranding\": \"26/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.783, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0265, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.259, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 590, \"unity\": \"amps\" } }, { \"id\": 64, \"size\": \"397500\", \"stranding\": \"30/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.806, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0278, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.259, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 600, \"unity\": \"amps\" } }, { \"id\": 65, \"size\": \"397500\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.724, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0228, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.258, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 440, \"unity\": \"amps\" } }, { \"id\": 66, \"size\": \"400000\", \"stranding\": \"19 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.726, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0229, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1619, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 730, \"unity\": \"amps\" } }, { \"id\": 67, \"size\": \"450000\", \"stranding\": \"19 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.77, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0243, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1443, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 780, \"unity\": \"amps\" } }, { \"id\": 68, \"size\": \"450000\", \"stranding\": \"CON LAG\", \"material\": \"AA\", \"diameter\": { \"value\": 0.77, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0243, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.229, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 450, \"unity\": \"amps\" } }, { \"id\": 69, \"size\": \"477000\", \"stranding\": \"26/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.858, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.029, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.216, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 670, \"unity\": \"amps\" } }, { \"id\": 70, \"size\": \"477000\", \"stranding\": \"30/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.883, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0304, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.216, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 670, \"unity\": \"amps\" } }, { \"id\": 71, \"size\": \"477000\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.795, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0254, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.216, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 510, \"unity\": \"amps\" } }, { \"id\": 72, \"size\": \"500000\", \"stranding\": \"19 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.811, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0256, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1303, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 840, \"unity\": \"amps\" } }, { \"id\": 73, \"size\": \"500000\", \"stranding\": \"37 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.814, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.026, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1303, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 840, \"unity\": \"amps\" } }, { \"id\": 74, \"size\": \"500000\", \"stranding\": \"CON LAY\", \"material\": \"AA\", \"diameter\": { \"value\": 0.813, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.026, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.206, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 483, \"unity\": \"amps\" } }, { \"id\": 75, \"size\": \"556500\", \"stranding\": \"26/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.927, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0313, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1859, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 730, \"unity\": \"amps\" } }, { \"id\": 76, \"size\": \"556500\", \"stranding\": \"30/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.953, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0328, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1859, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 730, \"unity\": \"amps\" } }, { \"id\": 77, \"size\": \"556500\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.858, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0275, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.186, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 560, \"unity\": \"amps\" } }, { \"id\": 78, \"size\": \"600000\", \"stranding\": \"37 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.891, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0285, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1095, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 940, \"unity\": \"amps\" } }, { \"id\": 79, \"size\": \"600000\", \"stranding\": \"CON LAY\", \"material\": \"AA\", \"diameter\": { \"value\": 0.891, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0285, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.172, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 520, \"unity\": \"amps\" } }, { \"id\": 80, \"size\": \"605000\", \"stranding\": \"26/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.966, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0327, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.172, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 760, \"unity\": \"amps\" } }, { \"id\": 81, \"size\": \"605000\", \"stranding\": \"54/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.953, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0321, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1775, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 750, \"unity\": \"amps\" } }, { \"id\": 82, \"size\": \"636000\", \"stranding\": \"27/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.99, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0335, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1618, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 780, \"unity\": \"amps\" } }, { \"id\": 83, \"size\": \"636000\", \"stranding\": \"30/19\", \"material\": \"ACSR\", \"diameter\": { \"value\": 1.019, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0351, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1618, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 780, \"unity\": \"amps\" } }, { \"id\": 84, \"size\": \"636000\", \"stranding\": \"54/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 0.977, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0329, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1688, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 770, \"unity\": \"amps\" } }, { \"id\": 85, \"size\": \"636000\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.918, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0294, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.163, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 620, \"unity\": \"amps\" } }, { \"id\": 86, \"size\": \"666600\", \"stranding\": \"54/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 1, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0337, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1601, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 800, \"unity\": \"amps\" } }, { \"id\": 87, \"size\": \"700000\", \"stranding\": \"37 STRD\", \"material\": \"Copper\", \"diameter\": { \"value\": 0.963, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0308, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.0947, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 1040, \"unity\": \"amps\" } }, { \"id\": 88, \"size\": \"700000\", \"stranding\": \"CON LAY\", \"material\": \"AA\", \"diameter\": { \"value\": 0.963, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0308, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.148, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 580, \"unity\": \"amps\" } }, { \"id\": 89, \"size\": \"715500\", \"stranding\": \"26/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 1.051, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0355, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1442, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 840, \"unity\": \"amps\" } }, { \"id\": 90, \"size\": \"715500\", \"stranding\": \"30/19\", \"material\": \"ACSR\", \"diameter\": { \"value\": 1.081, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0372, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1442, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 840, \"unity\": \"amps\" } }, { \"id\": 91, \"size\": \"715500\", \"stranding\": \"54/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 1.036, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0349, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1482, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 830, \"unity\": \"amps\" } }, { \"id\": 92, \"size\": \"715500\", \"stranding\": \"CLASS A\", \"material\": \"AA\", \"diameter\": { \"value\": 0.974, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0312, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.145, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 680, \"unity\": \"amps\" } }, { \"id\": 93, \"size\": \"750000\", \"stranding\": \"37 STRD\", \"material\": \"AA\", \"diameter\": { \"value\": 0.997, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0319, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.0888, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 1090, \"unity\": \"amps\" } }, { \"id\": 94, \"size\": \"750000\", \"stranding\": \"CON LAY\", \"material\": \"AA\", \"diameter\": { \"value\": 0.997, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0319, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.139, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 602, \"unity\": \"amps\" } }, { \"id\": 95, \"size\": \"795000\", \"stranding\": \"26/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 1.108, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0375, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1288, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 900, \"unity\": \"amps\" } }, { \"id\": 96, \"size\": \"795000\", \"stranding\": \"30/19\", \"material\": \"ACSR\", \"diameter\": { \"value\": 1.14, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0393, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1288, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 910, \"unity\": \"amps\" } }, { \"id\": 97, \"size\": \"795000\", \"stranding\": \"54/7\", \"material\": \"ACSR\", \"diameter\": { \"value\": 1.093, \"unity\": \"inch\" }, \"gmr\": { \"value\": 0.0368, \"unity\": \"feet\" }, \"resistence\": { \"value\": 0.1378, \"unity\": \"ohms/mile\" }, \"capacity\": { \"value\": 900, \"unity\": \"amps\" } } ]","title":"Condutores"},{"location":"firstgrid/","text":"Primeira Rede Teste: Importando bibliotecas from mygrid.grid import GridElements, ExternalGrid, Generation from mygrid.grid import Shunt_Capacitor from mygrid.grid import Substation, Sector, Switch, LineModel, UnderGroundLine from mygrid.grid import Under_Ground_Conductor from mygrid.grid import Section, LoadNode, TransformerModel, Conductor from mygrid.grid import Auto_TransformerModel from mygrid.util import R, P from mygrid.util import p2r, r2p from terminaltables import AsciiTable import time import numpy as np Definindo chaves, espa\u00e7amento dos cabos de uma linha el\u00e9trica e as impend\u00e2ncias internas de uma gera\u00e7\u00e3o distribuida spacing500=[0.0 + 29.0j, 2.5 + 29.0j, 7.0 + 29.0j, 4.0 + 25.0j] # switchs do alimentador 1 de S1 ch1 = Switch(name='1', state=1) ch2 = Switch(name='2', state=1) ch3 = Switch(name='3', state=1) # Switchs do alimentador 2 de S1 ch9 = Switch(name='9', state=1) ch10 = Switch(name='10', state=1) # switchs de Fronteira ch4 = Switch(name='4', state=0) ch5 = Switch(name='5', state=0) ch8 = Switch(name='8', state=0) ch11 = Switch(name='11', state=0) # switchs do alimentador de S2 ch6 = Switch(name='6', state=1) ch7 = Switch(name='7', state=1) Z = np.eye(3, dtype=complex)*(15+100j) Z1 = np.eye(3, dtype=complex) Z2 = np.eye(3, dtype=complex)*(1.5+5j) Definindo as tens\u00f5es nominais da rede # tensao nominal vll_mt = p2r(13.8e3, 0.0) vll_bt = p2r(380.0, 0.0) Transformador t1 = TransformerModel(name=\"T1\", primary_voltage=vll_mt, secondary_voltage=vll_bt, power=225e3, impedance=0.01 + 0.2j) Rede externa eg1 = ExternalGrid(name='extern grid 1', vll=vll_mt) Defini\u00e7\u00e3o de GD's C2_PV = Generation(name=\"C2_PV\", P=0e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=0.98, DV_presc=0.002, generation_type=\"PV\", Z=Z) A3_PV = Generation(name=\"A3_PV\", P=0e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=0.98, DV_presc=0.002, generation_type=\"PV\", Z=Z) B3_PV = Generation(name=\"B3_PV\", P=0e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=0.98, DV_presc=0.002, generation_type=\"PV\", Z=Z) B1_PV = Generation(name=\"B1_PV\", P=0e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=0.98, DV_presc=0.002, generation_type=\"PV\", Z=Z) C3_PV = Generation(name=\"C3_PV\", P=10e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=1.0, DV_presc=0.002, generation_type=\"PV\", Z=Z) G1_PV = Generation(name=\"G1_PV\", P=10e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=1.0, DV_presc=0.002, generation_type=\"PV\", Z=Z2) b2_PV = Generation(name=\"b2_PV\", P=0e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=0.98, DV_presc=0.0002, generation_type=\"PV\", Z=Z) aa1_PQ = Generation(name=\"aa1_PV\", Pa=-2.62e3j, Pb=-2.62e3j, Pc=-2.62e3j, generation_type=\"PQ\", Z=Z) aa2_PQ = Generation(name=\"aa2_PV\", Pa=8.12e3j, Pb=8.12e3j, Pc=8.12e3j, generation_type=\"PQ\", Z=Z) Capacitor shunt SC_C1 = Shunt_Capacitor(vll=13.8e3, Qa=1000e3, Qb=1000e3, Qc=1000e3, type_connection=\"wye\") Nos de carga do alimentador S1_AL1 s1 = LoadNode(name='S1', voltage=vll_mt, external_grid=eg1) a1 = LoadNode(name='A1', power=120+160j, voltage=vll_mt) a2 = LoadNode(name='A2', power=150.0e3 + 110.0e3j, voltage=vll_mt) a3 = LoadNode(name='A3', generation=A3_PV, ppa=100.0e3 + 36.670e3j, ppb=100.0e3 + 36.670e3j, ppc=100.0e3 + 36.670e3j, voltage=vll_mt) b1 = LoadNode(name='B1', generation=B1_PV, ppa=100.0e3 + 36.670e3j, ppb=100.0e3 + 36.670e3j, ppc=100.0e3 + 36.670e3j, voltage=vll_mt) b2 = LoadNode(name='B2', generation = b2_PV, power=150.0e3 + 110.0e3j, voltage=vll_mt) b3 = LoadNode(name='B3', generation=B3_PV, power=100.0e3 + 80.0e3j, voltage=vll_mt) c1 = LoadNode(name='C1', power=200.0e3 + 140.0e3j, voltage=vll_mt) c2 = LoadNode(name='C2', generation=C2_PV, power=150.0e3 + 110.0e3j, voltage=vll_mt) c3 = LoadNode(name='C3', #generation=C3_PV, ppa=20.0e3 + 36.670e3j, ppb=150.0e3 + 36.670e3j, ppc=100.0e3 + 36.670e3j, voltage=vll_mt) Nos de carga do alimentador S1_AL2 f1 = LoadNode(name='F1', power=100.0e3 + 80.0e3j, voltage=vll_mt) g1 = LoadNode(name='G1', power=100.0e3 + 80.0e3j, # generation=G1_PV, voltage=vll_mt) Nos de carga do alimentador S2_AL1 s2 = LoadNode(name='S2', voltage=vll_mt, external_grid=eg1) d1 = LoadNode(name='D1', power=200.0e3 + 160.0e3j, voltage=vll_mt) d2 = LoadNode(name='D2', power=900.0e3 + 40.0e3j, voltage=vll_mt) d3 = LoadNode(name='D3', power=100.0e3 + 80.0e3j, voltage=vll_mt,) e1 = LoadNode(name='E1', power=100.0e3 + 40.0e3j, voltage=vll_mt) e2 = LoadNode(name='E2', power=110.0e3 + 70.0e3j, voltage=vll_mt) e3 = LoadNode(name='E3', power=150.0e3 + 80.0e3j, voltage=vll_mt) Rede de baixa tens\u00e3o conectada em A1 aa1 = LoadNode(name='AA1', power=0.0 + 0.0j, voltage=vll_bt) aa2 = LoadNode(name='AA2', # generation=aa2_PQ, power=20.0e3 + 5.0e3j, voltage=vll_bt) aa3 = LoadNode(name='AA3', # generation=aa1_PQ, power=20.0e3 + 5.0e3j, voltage=vll_bt) Defini\u00e7\u00e3o das linhas el\u00e9tricas phase_conduct = Conductor(id=57) neutral_conduct = Conductor(id=44) line_model_a = LineModel(loc=spacing500, phasing=['a','b','c','n'], conductor=phase_conduct, neutral_conductor=neutral_conduct) phase_conduct_bt = Conductor(id=32) line_model_b = LineModel(loc=spacing500, phasing=['a','b','c','n'], conductor=phase_conduct_bt, neutral_conductor=neutral_conduct) Trechos do alimentador S1_AL1 s1_a2 = Section(name='S1A2', n1=s1, n2=a2, switch=ch1, line_model=line_model_a, length=4) a2_a1 = Section(name='A2A1', n1=a2, n2=a1, line_model=line_model_a, length=4) a2_a3 = Section(name='A2A3', n1=a2, n2=a3, line_model=line_model_a, length=4) a2_c1 = Section(name='A2C1', n1=a2, n2=c1, switch=ch3, line_model=line_model_a, length=4) c1_c2 = Section(name='C1C2', n1=c1, n2=c2, line_model=line_model_a, length=4) c1_c3 = Section(name='C1C3', n1=c1, n2=c3, line_model=line_model_a, length=4) a3_b1 = Section(name='A3B1', n1=a3, n2=b1, switch=ch2, line_model=line_model_a, length=4) b1_b2 = Section(name='B1B2', n1=b1, n2=b2, line_model=line_model_a, length=4) b2_b3 = Section(name='B2B3', n1=b2, n2=b3, line_model=line_model_a, length=4) Trechos do alimentador S1_AL2 s1_f1 = Section(name='S1F1', n1=s1, n2=f1, switch=ch9, line_model=line_model_a, length=1.0) f1_g1 = Section(name='F1G1', n1=f1, n2=g1, switch=ch10, line_model=line_model_a, length=1.0) g1_d2 = Section(name='G1D2', n1=g1, n2=d2, switch=ch11, line_model=line_model_a, length=1.0) Trechos do alimentador S2_AL1 s2_d1 = Section(name='S2D1', n1=s2, n2=d1, switch=ch6, line_model=line_model_a, length=1.0) d1_d2 = Section(name='D1D2', n1=d1, n2=d2, line_model=line_model_a, length=1.0) d1_d3 = Section(name='D1D3', n1=d1, n2=d3, line_model=line_model_a, length=1.0) d1_e1 = Section(name='D1E1', n1=d1, n2=e1, switch=ch7, line_model=line_model_a, length=1.0) e1_e2 = Section(name='E1E2', n1=e1, n2=e2, line_model=line_model_a, length=1.0) e1_e3 = Section(name='E1E3', n1=e1, n2=e3, line_model=line_model_a, length=1.0) Trechos de encontro de alimentador c3_e3 = Section(name='C3E3', n1=c3, n2=e3, switch=ch8, line_model=line_model_a, length=1.0) b2_e2 = Section(name='B2E2', n1=b2, n2=e2, switch=ch4, line_model=line_model_a, length=1.0) b3_c3 = Section(name='B3C3', n1=b3, n2=c3, switch=ch5, line_model=line_model_a, length=0.5) Trechos em baixa tens\u00e3o a montante de A1 a1_aa1 = Section(name='A1AA1', n1=a1, n2=aa1, transformer=t1, length=3.0e-2) aa1_aa2 = Section(name='AA1AA2', n1=aa1, n2=aa2, line_model=line_model_b, length=3.0e-2) aa1_aa3 = Section(name='AA1AA3', n1=aa1, n2=aa3, line_model=line_model_b, length=3.0e-2) Listando n\u00f3s, trechos e chaves: load_nodes = [s1, a1, a2, a3, b1, b2, b3, c1, c2, c3, s2, d1, d2, d3, e1, e2, e3, f1, g1, aa1, aa2, aa3] sections = [s1_a2, a2_a1, a2_a3, a2_c1, c1_c2, c1_c3, c3_e3, a3_b1, b1_b2, b2_b3, b2_e2, b3_c3, s2_d1, d1_d2, d1_d3, d1_e1, e1_e2, e1_e3, s1_f1, f1_g1, g1_d2, a1_aa1, aa1_aa2, aa1_aa3] switchs = [ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8, ch9, ch10, ch11] Criando o objeto rede: grid_elements = GridElements(name='my_grid_elements') Adicionando os elementos constituintes da rede. grid_elements.add_switch(switchs) grid_elements.add_load_node(load_nodes) grid_elements.add_section(sections) Criando a rede: grid_elements.create_grid() Fluxo de Carga from mygrid.power_flow.backward_forward_sweep_3p import calc_power_flow inicio = time.time() calc_power_flow(grid_elements.dist_grids['F0']) fim = time.time() print(fim - inicio) grid_elements.nodes_table_voltage(Df=False) grid_elements.dist_grids retorna, em lista, objetos contidos em alimentadores que pertecem a uma mesma subesta\u00e7\u00e3o. grid_elements.nodes_table_voltage . Retorna em tela uma tabela que cont\u00e9m as principais informa\u00e7\u00f5es do fluxo de carga para toda a rede. Caso Df = True , retorna um objeto no formato DataFrame. Curto-Circuito Curto circuito em componentes de fase: from mygrid.short_circuit import phase_components phase_components possui os seguintes m\u00e9todos para o c\u00e1lculo do curto-circuito. phase_components.biphasic para curto bif\u00e1sico. phase_components.biphasic_to_ground para curto bif\u00e1sico com contato para terra. phase_components.three_phase_to_ground para curto trif\u00e1sico com contato para terra. phase_components.three_phase para curto trif\u00e1sico. phase_components.mono_phase para curto monof\u00e1sico. phase_components.min_mono_phase para curto monof\u00e1sico m\u00ednimo. Esses m\u00e9todos possuem os seguintes argumentos: distgrid objeto rede. node_name nome do n\u00f3 em falta. fs='Higher' Indica que fases considerar na execu\u00e7\u00e3o do c\u00e1lculo do curto-circuito. Higher indica que ser\u00e1 considerado a combina\u00e7\u00e3o de fases que gere o maior n\u00edvel de curto. Para curto bif\u00e1sico tr\u00eas combina\u00e7\u00f5es s\u00e3o aceitas: Fab , Fac e Fbc Para curto bif\u00e1sico com contato para terra tr\u00eas combina\u00e7\u00f5es s\u00e3o aceitas: Fab_g , Fac_g e Fbc_g Para curto monof\u00e1sico tr\u00eas combina\u00e7\u00f5es s\u00e3o aceitas: Fag , Fcg e Fbg . Para curto monof\u00e1sico m\u00ednimo tr\u00eas combina\u00e7\u00f5es s\u00e3o aceitas: Fag_min , Fcg_min e Fbg_min Df Indica se o resultado retornado ser\u00e1 no formato de dicion\u00e1rio ou de dataframe. zc=0+0j Imped\u00e2ncia de contato. zt Imped\u00e2ncia do solo. Usada somente em phase_components.min_mono_phase . Exemplo from mygrid.short_circuit.phase_components import biphasic from mygrid.short_circuit.phase_components import biphasic_to_ground from mygrid.short_circuit.phase_components import three_phase, mono_phase from mygrid.short_circuit.phase_components import min_mono_phase from mygrid.short_circuit.phase_components import three_phase_to_ground distgrid=grid_elements.dist_grids['F0'] Iftg=three_phase_to_ground(distgrid, 'C1') Ifb=biphasic(distgrid, 'C1') Ifbg=biphasic_to_ground(distgrid, 'A2', fs='Fab_g') ft= three_phase(distgrid, 'C1')","title":"Primeira Rede"},{"location":"firstgrid/#primeira-rede-teste","text":"","title":"Primeira Rede Teste:"},{"location":"firstgrid/#importando-bibliotecas","text":"from mygrid.grid import GridElements, ExternalGrid, Generation from mygrid.grid import Shunt_Capacitor from mygrid.grid import Substation, Sector, Switch, LineModel, UnderGroundLine from mygrid.grid import Under_Ground_Conductor from mygrid.grid import Section, LoadNode, TransformerModel, Conductor from mygrid.grid import Auto_TransformerModel from mygrid.util import R, P from mygrid.util import p2r, r2p from terminaltables import AsciiTable import time import numpy as np","title":"Importando bibliotecas"},{"location":"firstgrid/#definindo-chaves-espacamento-dos-cabos-de-uma-linha-eletrica-e-as-impendancias-internas-de-uma-geracao-distribuida","text":"spacing500=[0.0 + 29.0j, 2.5 + 29.0j, 7.0 + 29.0j, 4.0 + 25.0j] # switchs do alimentador 1 de S1 ch1 = Switch(name='1', state=1) ch2 = Switch(name='2', state=1) ch3 = Switch(name='3', state=1) # Switchs do alimentador 2 de S1 ch9 = Switch(name='9', state=1) ch10 = Switch(name='10', state=1) # switchs de Fronteira ch4 = Switch(name='4', state=0) ch5 = Switch(name='5', state=0) ch8 = Switch(name='8', state=0) ch11 = Switch(name='11', state=0) # switchs do alimentador de S2 ch6 = Switch(name='6', state=1) ch7 = Switch(name='7', state=1) Z = np.eye(3, dtype=complex)*(15+100j) Z1 = np.eye(3, dtype=complex) Z2 = np.eye(3, dtype=complex)*(1.5+5j)","title":"Definindo chaves, espa\u00e7amento dos cabos de uma linha el\u00e9trica e as impend\u00e2ncias internas de uma gera\u00e7\u00e3o distribuida"},{"location":"firstgrid/#definindo-as-tensoes-nominais-da-rede","text":"# tensao nominal vll_mt = p2r(13.8e3, 0.0) vll_bt = p2r(380.0, 0.0)","title":"Definindo as tens\u00f5es nominais da rede"},{"location":"firstgrid/#transformador","text":"t1 = TransformerModel(name=\"T1\", primary_voltage=vll_mt, secondary_voltage=vll_bt, power=225e3, impedance=0.01 + 0.2j)","title":"Transformador"},{"location":"firstgrid/#rede-externa","text":"eg1 = ExternalGrid(name='extern grid 1', vll=vll_mt)","title":"Rede externa"},{"location":"firstgrid/#definicao-de-gds","text":"C2_PV = Generation(name=\"C2_PV\", P=0e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=0.98, DV_presc=0.002, generation_type=\"PV\", Z=Z) A3_PV = Generation(name=\"A3_PV\", P=0e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=0.98, DV_presc=0.002, generation_type=\"PV\", Z=Z) B3_PV = Generation(name=\"B3_PV\", P=0e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=0.98, DV_presc=0.002, generation_type=\"PV\", Z=Z) B1_PV = Generation(name=\"B1_PV\", P=0e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=0.98, DV_presc=0.002, generation_type=\"PV\", Z=Z) C3_PV = Generation(name=\"C3_PV\", P=10e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=1.0, DV_presc=0.002, generation_type=\"PV\", Z=Z) G1_PV = Generation(name=\"G1_PV\", P=10e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=1.0, DV_presc=0.002, generation_type=\"PV\", Z=Z2) b2_PV = Generation(name=\"b2_PV\", P=0e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=0.98, DV_presc=0.0002, generation_type=\"PV\", Z=Z) aa1_PQ = Generation(name=\"aa1_PV\", Pa=-2.62e3j, Pb=-2.62e3j, Pc=-2.62e3j, generation_type=\"PQ\", Z=Z) aa2_PQ = Generation(name=\"aa2_PV\", Pa=8.12e3j, Pb=8.12e3j, Pc=8.12e3j, generation_type=\"PQ\", Z=Z)","title":"Defini\u00e7\u00e3o de GD's"},{"location":"firstgrid/#capacitor-shunt","text":"SC_C1 = Shunt_Capacitor(vll=13.8e3, Qa=1000e3, Qb=1000e3, Qc=1000e3, type_connection=\"wye\")","title":"Capacitor shunt"},{"location":"firstgrid/#nos-de-carga-do-alimentador-s1_al1","text":"s1 = LoadNode(name='S1', voltage=vll_mt, external_grid=eg1) a1 = LoadNode(name='A1', power=120+160j, voltage=vll_mt) a2 = LoadNode(name='A2', power=150.0e3 + 110.0e3j, voltage=vll_mt) a3 = LoadNode(name='A3', generation=A3_PV, ppa=100.0e3 + 36.670e3j, ppb=100.0e3 + 36.670e3j, ppc=100.0e3 + 36.670e3j, voltage=vll_mt) b1 = LoadNode(name='B1', generation=B1_PV, ppa=100.0e3 + 36.670e3j, ppb=100.0e3 + 36.670e3j, ppc=100.0e3 + 36.670e3j, voltage=vll_mt) b2 = LoadNode(name='B2', generation = b2_PV, power=150.0e3 + 110.0e3j, voltage=vll_mt) b3 = LoadNode(name='B3', generation=B3_PV, power=100.0e3 + 80.0e3j, voltage=vll_mt) c1 = LoadNode(name='C1', power=200.0e3 + 140.0e3j, voltage=vll_mt) c2 = LoadNode(name='C2', generation=C2_PV, power=150.0e3 + 110.0e3j, voltage=vll_mt) c3 = LoadNode(name='C3', #generation=C3_PV, ppa=20.0e3 + 36.670e3j, ppb=150.0e3 + 36.670e3j, ppc=100.0e3 + 36.670e3j, voltage=vll_mt)","title":"Nos de carga do alimentador S1_AL1"},{"location":"firstgrid/#nos-de-carga-do-alimentador-s1_al2","text":"f1 = LoadNode(name='F1', power=100.0e3 + 80.0e3j, voltage=vll_mt) g1 = LoadNode(name='G1', power=100.0e3 + 80.0e3j, # generation=G1_PV, voltage=vll_mt)","title":"Nos de carga do alimentador S1_AL2"},{"location":"firstgrid/#nos-de-carga-do-alimentador-s2_al1","text":"s2 = LoadNode(name='S2', voltage=vll_mt, external_grid=eg1) d1 = LoadNode(name='D1', power=200.0e3 + 160.0e3j, voltage=vll_mt) d2 = LoadNode(name='D2', power=900.0e3 + 40.0e3j, voltage=vll_mt) d3 = LoadNode(name='D3', power=100.0e3 + 80.0e3j, voltage=vll_mt,) e1 = LoadNode(name='E1', power=100.0e3 + 40.0e3j, voltage=vll_mt) e2 = LoadNode(name='E2', power=110.0e3 + 70.0e3j, voltage=vll_mt) e3 = LoadNode(name='E3', power=150.0e3 + 80.0e3j, voltage=vll_mt)","title":"Nos de carga do alimentador S2_AL1"},{"location":"firstgrid/#rede-de-baixa-tensao-conectada-em-a1","text":"aa1 = LoadNode(name='AA1', power=0.0 + 0.0j, voltage=vll_bt) aa2 = LoadNode(name='AA2', # generation=aa2_PQ, power=20.0e3 + 5.0e3j, voltage=vll_bt) aa3 = LoadNode(name='AA3', # generation=aa1_PQ, power=20.0e3 + 5.0e3j, voltage=vll_bt)","title":"Rede de baixa tens\u00e3o conectada em  A1"},{"location":"firstgrid/#definicao-das-linhas-eletricas","text":"phase_conduct = Conductor(id=57) neutral_conduct = Conductor(id=44) line_model_a = LineModel(loc=spacing500, phasing=['a','b','c','n'], conductor=phase_conduct, neutral_conductor=neutral_conduct) phase_conduct_bt = Conductor(id=32) line_model_b = LineModel(loc=spacing500, phasing=['a','b','c','n'], conductor=phase_conduct_bt, neutral_conductor=neutral_conduct)","title":"Defini\u00e7\u00e3o das linhas el\u00e9tricas"},{"location":"firstgrid/#trechos-do-alimentador-s1_al1","text":"s1_a2 = Section(name='S1A2', n1=s1, n2=a2, switch=ch1, line_model=line_model_a, length=4) a2_a1 = Section(name='A2A1', n1=a2, n2=a1, line_model=line_model_a, length=4) a2_a3 = Section(name='A2A3', n1=a2, n2=a3, line_model=line_model_a, length=4) a2_c1 = Section(name='A2C1', n1=a2, n2=c1, switch=ch3, line_model=line_model_a, length=4) c1_c2 = Section(name='C1C2', n1=c1, n2=c2, line_model=line_model_a, length=4) c1_c3 = Section(name='C1C3', n1=c1, n2=c3, line_model=line_model_a, length=4) a3_b1 = Section(name='A3B1', n1=a3, n2=b1, switch=ch2, line_model=line_model_a, length=4) b1_b2 = Section(name='B1B2', n1=b1, n2=b2, line_model=line_model_a, length=4) b2_b3 = Section(name='B2B3', n1=b2, n2=b3, line_model=line_model_a, length=4)","title":"Trechos do alimentador S1_AL1"},{"location":"firstgrid/#trechos-do-alimentador-s1_al2","text":"s1_f1 = Section(name='S1F1', n1=s1, n2=f1, switch=ch9, line_model=line_model_a, length=1.0) f1_g1 = Section(name='F1G1', n1=f1, n2=g1, switch=ch10, line_model=line_model_a, length=1.0) g1_d2 = Section(name='G1D2', n1=g1, n2=d2, switch=ch11, line_model=line_model_a, length=1.0)","title":"Trechos do alimentador S1_AL2"},{"location":"firstgrid/#trechos-do-alimentador-s2_al1","text":"s2_d1 = Section(name='S2D1', n1=s2, n2=d1, switch=ch6, line_model=line_model_a, length=1.0) d1_d2 = Section(name='D1D2', n1=d1, n2=d2, line_model=line_model_a, length=1.0) d1_d3 = Section(name='D1D3', n1=d1, n2=d3, line_model=line_model_a, length=1.0) d1_e1 = Section(name='D1E1', n1=d1, n2=e1, switch=ch7, line_model=line_model_a, length=1.0) e1_e2 = Section(name='E1E2', n1=e1, n2=e2, line_model=line_model_a, length=1.0) e1_e3 = Section(name='E1E3', n1=e1, n2=e3, line_model=line_model_a, length=1.0)","title":"Trechos do alimentador S2_AL1"},{"location":"firstgrid/#trechos-de-encontro-de-alimentador","text":"c3_e3 = Section(name='C3E3', n1=c3, n2=e3, switch=ch8, line_model=line_model_a, length=1.0) b2_e2 = Section(name='B2E2', n1=b2, n2=e2, switch=ch4, line_model=line_model_a, length=1.0) b3_c3 = Section(name='B3C3', n1=b3, n2=c3, switch=ch5, line_model=line_model_a, length=0.5)","title":"Trechos de encontro de alimentador"},{"location":"firstgrid/#trechos-em-baixa-tensao-a-montante-de-a1","text":"a1_aa1 = Section(name='A1AA1', n1=a1, n2=aa1, transformer=t1, length=3.0e-2) aa1_aa2 = Section(name='AA1AA2', n1=aa1, n2=aa2, line_model=line_model_b, length=3.0e-2) aa1_aa3 = Section(name='AA1AA3', n1=aa1, n2=aa3, line_model=line_model_b, length=3.0e-2)","title":"Trechos em baixa tens\u00e3o a montante de  A1"},{"location":"firstgrid/#listando-nos-trechos-e-chaves","text":"load_nodes = [s1, a1, a2, a3, b1, b2, b3, c1, c2, c3, s2, d1, d2, d3, e1, e2, e3, f1, g1, aa1, aa2, aa3] sections = [s1_a2, a2_a1, a2_a3, a2_c1, c1_c2, c1_c3, c3_e3, a3_b1, b1_b2, b2_b3, b2_e2, b3_c3, s2_d1, d1_d2, d1_d3, d1_e1, e1_e2, e1_e3, s1_f1, f1_g1, g1_d2, a1_aa1, aa1_aa2, aa1_aa3] switchs = [ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8, ch9, ch10, ch11]","title":"Listando n\u00f3s, trechos e chaves:"},{"location":"firstgrid/#criando-o-objeto-rede","text":"grid_elements = GridElements(name='my_grid_elements')","title":"Criando o objeto rede:"},{"location":"firstgrid/#adicionando-os-elementos-constituintes-da-rede","text":"grid_elements.add_switch(switchs) grid_elements.add_load_node(load_nodes) grid_elements.add_section(sections)","title":"Adicionando os elementos constituintes da rede."},{"location":"firstgrid/#criando-a-rede","text":"grid_elements.create_grid()","title":"Criando a rede:"},{"location":"firstgrid/#fluxo-de-carga","text":"from mygrid.power_flow.backward_forward_sweep_3p import calc_power_flow inicio = time.time() calc_power_flow(grid_elements.dist_grids['F0']) fim = time.time() print(fim - inicio) grid_elements.nodes_table_voltage(Df=False) grid_elements.dist_grids retorna, em lista, objetos contidos em alimentadores que pertecem a uma mesma subesta\u00e7\u00e3o. grid_elements.nodes_table_voltage . Retorna em tela uma tabela que cont\u00e9m as principais informa\u00e7\u00f5es do fluxo de carga para toda a rede. Caso Df = True , retorna um objeto no formato DataFrame.","title":"Fluxo de Carga"},{"location":"firstgrid/#curto-circuito","text":"Curto circuito em componentes de fase: from mygrid.short_circuit import phase_components phase_components possui os seguintes m\u00e9todos para o c\u00e1lculo do curto-circuito. phase_components.biphasic para curto bif\u00e1sico. phase_components.biphasic_to_ground para curto bif\u00e1sico com contato para terra. phase_components.three_phase_to_ground para curto trif\u00e1sico com contato para terra. phase_components.three_phase para curto trif\u00e1sico. phase_components.mono_phase para curto monof\u00e1sico. phase_components.min_mono_phase para curto monof\u00e1sico m\u00ednimo. Esses m\u00e9todos possuem os seguintes argumentos: distgrid objeto rede. node_name nome do n\u00f3 em falta. fs='Higher' Indica que fases considerar na execu\u00e7\u00e3o do c\u00e1lculo do curto-circuito. Higher indica que ser\u00e1 considerado a combina\u00e7\u00e3o de fases que gere o maior n\u00edvel de curto. Para curto bif\u00e1sico tr\u00eas combina\u00e7\u00f5es s\u00e3o aceitas: Fab , Fac e Fbc Para curto bif\u00e1sico com contato para terra tr\u00eas combina\u00e7\u00f5es s\u00e3o aceitas: Fab_g , Fac_g e Fbc_g Para curto monof\u00e1sico tr\u00eas combina\u00e7\u00f5es s\u00e3o aceitas: Fag , Fcg e Fbg . Para curto monof\u00e1sico m\u00ednimo tr\u00eas combina\u00e7\u00f5es s\u00e3o aceitas: Fag_min , Fcg_min e Fbg_min Df Indica se o resultado retornado ser\u00e1 no formato de dicion\u00e1rio ou de dataframe. zc=0+0j Imped\u00e2ncia de contato. zt Imped\u00e2ncia do solo. Usada somente em phase_components.min_mono_phase .","title":"Curto-Circuito"},{"location":"firstgrid/#exemplo","text":"from mygrid.short_circuit.phase_components import biphasic from mygrid.short_circuit.phase_components import biphasic_to_ground from mygrid.short_circuit.phase_components import three_phase, mono_phase from mygrid.short_circuit.phase_components import min_mono_phase from mygrid.short_circuit.phase_components import three_phase_to_ground distgrid=grid_elements.dist_grids['F0'] Iftg=three_phase_to_ground(distgrid, 'C1') Ifb=biphasic(distgrid, 'C1') Ifbg=biphasic_to_ground(distgrid, 'A2', fs='Fab_g') ft= three_phase(distgrid, 'C1')","title":"Exemplo"},{"location":"linhas/","text":"Linhas de Distribui\u00e7\u00e3o O MyGrid possui modelagem para linhas a\u00e9reas at\u00e9 4 fios, 3 fases + neutro, e linhas subterr\u00e2neas at\u00e9 3 fases + Neutro. Modelagem e c\u00e1lculo dos par\u00e2metros das linhas el\u00e9tricas est\u00e3o baseados nos cap\u00edtulos 4, 5 e 6 do livro Distribution System Modeling and Analysis . Condutores para linhas a\u00e9reas Defini\u00e7\u00e3o dos par\u00e2metros dos condutores a\u00e9reos: class Conductor(object): def __init__(self, id=None): id : Chave de indentifica\u00e7\u00e3o do condutor no arquivo conductor.json . Neste arquivo, o usu\u00e1rio tem acesso a diversos dados de condutores de linhas a\u00e9reas, como tamb\u00e9m pode acrescentar novas informa\u00e7\u00f5es conforme a sua necessidade. Exemplo: from mygrid.grid import Conductor conduct1 = Conductor(id=75) conduct2 = Conductor(id=44) conduct3 = Conductor(id=31) conduct6 = Conductor(id=32) Linhas A\u00e9reas class LineModel(object): def __init__(self, loc=[], neutral=False, conductor=None, neutral_conductor=None, phasing=['a','b','c','n'], Transpose=False, units='Imperial', f=60, pg=100, z012=None, y012=np.zeros((3,3)), z=None, y=np.zeros((3,3))): Defini\u00e7\u00e3o dos par\u00e2metros: loc : Posi\u00e7\u00f5es dos condutores presentes na linha. list neutral : Indica a exist\u00eancia de neutro. boolean conductor : Inst\u00e2ncia do condutor Fase. Conductor neutral_conductor : Inst\u00e2ncia do condutor Neutro. Conductor phasing : Indica a que fase ou neutro, pertence as posi\u00e7\u00f5es dadas em loc . list units : Define em qual unidade, 'Imperial' ou 'SI' , deve se calcular a imped\u00e2ncia s\u00e9rie e admit\u00e2ncia shunt da linha. string f : Frequ\u00eancia da linha (Hz). float pg : Resistividade do solo (\u03a9.m). float z012 : Permite a cria\u00e7\u00e3o de um modelo de linha gen\u00e9rico a partir da matriz de imped\u00e3ncia de sequ\u00eancia (\u03a9). array y012 : Permite a cria\u00e7\u00e3o de um modelo de linha gen\u00e9rico a partir da matriz de admit\u00e2ncia shunt em componentes de sequ\u00eancia (\u03a9). array z : Permite a cria\u00e7\u00e3o de um modelo de linha gen\u00e9rico a partir da matriz de imped\u00e3ncia de fase (\u03a9). array y : Permite a cria\u00e7\u00e3o de um modelo de linha gen\u00e9rico a partir da matriz de admit\u00e2ncia shunt em componentes de fase (\u03a9). array Exemplo: Os modelos de linha a seguir foram retirados da rede teste 13 Barras : from mygrid.grid import LineModel Espa\u00e7amentos dos cabos: spacing500=[0.0 + 28.0j, 2.5 + 28.0j, 7.0 + 28.0j, 4.0 + 24.0j] spacing505=[0.0 + 28.0j, 7.0 + 28.0j, 4.0 + 24.0j] Criando os modelos de linhas a\u00e9rea: line601 = LineModel(loc=spacing500, phasing=['b','a','c','n'], conductor=conduct1, neutral_conductor=conduct2) line602 = LineModel(loc=spacing500, phasing=['c','a','b','n'], conductor=conduct2, neutral_conductor=conduct2) line603 = LineModel(loc=spacing505, phasing=['c','b','n'], conductor=conduct3, neutral_conductor=conduct3) Condutores para linhas subterr\u00e2neas class Under_Ground_Conductor(object): def __init__(self, name = None, type=\"concentric\", outsider_diameter = None, rp = None, GMRp = None, dp = None, k = None, rs = None, GMRs = None, ds = None, T=None, ampacity = None): Defini\u00e7\u00e3o dos par\u00e2metros: name : Nome do condutor. Opcional. string type : Indica se o cabo a ser modelado \u00e9 do tipo blindado, \"tapeshield\" , ou de neutro concentrico, \"concentric\" . string outsider_diameter : Di\u00e2metro externo do cabo (in). rp : Resistividade do condutor fase (\u03a9/mi). GMRp : Raio m\u00e9dio geom\u00e9trico do condutor fase (ft). dp : Di\u00e2metro do condutor fase (in) k : N\u00famero de neutros conc\u00eantricos. rs : Resistividade do neutro conc\u00eantrico (\u03a9/mi). GMRs : Raio m\u00e9dio geom\u00e9trico do condutor fase (ft). ds : Di\u00e2metro do neutro conc\u00eantrico (in). T : \u00c9 a espessura da blindagem (mil) Exemplos: from mygrid.grid import Under_Ground_Conductor conduct4 = Under_Ground_Conductor(outsider_diameter=1.29, rp=0.4100, GMRp=0.0171, dp=0.567, k=13, rs=14.87, GMRs=0.00208, ds=0.0641, ampacity=None) conduct5 = Under_Ground_Conductor(type=\"tapeshield\", rp=0.97, GMRp=0.0111, dp=0.368, ds=0.88, T=5) Linhas Subterr\u00e2neas No MyGrid \u00e9 poss\u00edvel modelos linhas subterr\u00e2neas com cabo blindado ou de neutro conc\u00eantrico. class UnderGroundLine(LineModel): def __init__(self, loc=[], conductor=None, phasing=['a','b','c'], neutral_conductor=None, Transpose=False, units='Imperial', f=60, pg=100): Defini\u00e7\u00e3o dos par\u00e2metros: loc : Posi\u00e7\u00f5es dos condutores presentes na linha. list neutral : Indica a exist\u00eancia de neutro. boolean conductor : Inst\u00e2ncia do condutor Fase. UnderGroundLine neutral_conductor : Inst\u00e2ncia do condutor Neutro. Conductor phasing : Indica a que fase ou neutro, pertence as posi\u00e7\u00f5es dadas em loc . list units : Define em qual unidade, 'Imperial' ou 'SI' , deve se calcular a imped\u00e2ncia s\u00e9rie e admit\u00e2ncia shunt da linha. string f : Frequ\u00eancia da linha (Hz). float pg : Resistividade do solo (\u03a9.m). float Exemplos: line606 = UnderGroundLine(loc=spacing515, phasing=['a','b','c'], conductor=conduct4) line607 = UnderGroundLine(loc=spacing520, phasing=['a', 'n'], conductor=conduct5, neutral_conductor=conduct6) Refer\u00eancias [1] - KERSTING, W. H. Distribution System Modeling and Analysis. 3. ed. [S.l.]: CRC Press, 2012. [2] - KERSTING, W. H. Radial distribution test feeders. v. 2, p. 908\u2013912 vol.2, Jan 2001.","title":"Linhas de Distribui\u00e7\u00e3o"},{"location":"linhas/#linhas-de-distribuicao","text":"O MyGrid possui modelagem para linhas a\u00e9reas at\u00e9 4 fios, 3 fases + neutro, e linhas subterr\u00e2neas at\u00e9 3 fases + Neutro. Modelagem e c\u00e1lculo dos par\u00e2metros das linhas el\u00e9tricas est\u00e3o baseados nos cap\u00edtulos 4, 5 e 6 do livro Distribution System Modeling and Analysis .","title":"Linhas de Distribui\u00e7\u00e3o"},{"location":"linhas/#condutores-para-linhas-aereas","text":"Defini\u00e7\u00e3o dos par\u00e2metros dos condutores a\u00e9reos: class Conductor(object): def __init__(self, id=None): id : Chave de indentifica\u00e7\u00e3o do condutor no arquivo conductor.json . Neste arquivo, o usu\u00e1rio tem acesso a diversos dados de condutores de linhas a\u00e9reas, como tamb\u00e9m pode acrescentar novas informa\u00e7\u00f5es conforme a sua necessidade.","title":"Condutores para linhas a\u00e9reas"},{"location":"linhas/#exemplo","text":"from mygrid.grid import Conductor conduct1 = Conductor(id=75) conduct2 = Conductor(id=44) conduct3 = Conductor(id=31) conduct6 = Conductor(id=32)","title":"Exemplo:"},{"location":"linhas/#linhas-aereas","text":"class LineModel(object): def __init__(self, loc=[], neutral=False, conductor=None, neutral_conductor=None, phasing=['a','b','c','n'], Transpose=False, units='Imperial', f=60, pg=100, z012=None, y012=np.zeros((3,3)), z=None, y=np.zeros((3,3))): Defini\u00e7\u00e3o dos par\u00e2metros: loc : Posi\u00e7\u00f5es dos condutores presentes na linha. list neutral : Indica a exist\u00eancia de neutro. boolean conductor : Inst\u00e2ncia do condutor Fase. Conductor neutral_conductor : Inst\u00e2ncia do condutor Neutro. Conductor phasing : Indica a que fase ou neutro, pertence as posi\u00e7\u00f5es dadas em loc . list units : Define em qual unidade, 'Imperial' ou 'SI' , deve se calcular a imped\u00e2ncia s\u00e9rie e admit\u00e2ncia shunt da linha. string f : Frequ\u00eancia da linha (Hz). float pg : Resistividade do solo (\u03a9.m). float z012 : Permite a cria\u00e7\u00e3o de um modelo de linha gen\u00e9rico a partir da matriz de imped\u00e3ncia de sequ\u00eancia (\u03a9). array y012 : Permite a cria\u00e7\u00e3o de um modelo de linha gen\u00e9rico a partir da matriz de admit\u00e2ncia shunt em componentes de sequ\u00eancia (\u03a9). array z : Permite a cria\u00e7\u00e3o de um modelo de linha gen\u00e9rico a partir da matriz de imped\u00e3ncia de fase (\u03a9). array y : Permite a cria\u00e7\u00e3o de um modelo de linha gen\u00e9rico a partir da matriz de admit\u00e2ncia shunt em componentes de fase (\u03a9). array","title":"Linhas A\u00e9reas"},{"location":"linhas/#exemplo_1","text":"Os modelos de linha a seguir foram retirados da rede teste 13 Barras : from mygrid.grid import LineModel Espa\u00e7amentos dos cabos: spacing500=[0.0 + 28.0j, 2.5 + 28.0j, 7.0 + 28.0j, 4.0 + 24.0j] spacing505=[0.0 + 28.0j, 7.0 + 28.0j, 4.0 + 24.0j] Criando os modelos de linhas a\u00e9rea: line601 = LineModel(loc=spacing500, phasing=['b','a','c','n'], conductor=conduct1, neutral_conductor=conduct2) line602 = LineModel(loc=spacing500, phasing=['c','a','b','n'], conductor=conduct2, neutral_conductor=conduct2) line603 = LineModel(loc=spacing505, phasing=['c','b','n'], conductor=conduct3, neutral_conductor=conduct3)","title":"Exemplo:"},{"location":"linhas/#condutores-para-linhas-subterraneas","text":"class Under_Ground_Conductor(object): def __init__(self, name = None, type=\"concentric\", outsider_diameter = None, rp = None, GMRp = None, dp = None, k = None, rs = None, GMRs = None, ds = None, T=None, ampacity = None): Defini\u00e7\u00e3o dos par\u00e2metros: name : Nome do condutor. Opcional. string type : Indica se o cabo a ser modelado \u00e9 do tipo blindado, \"tapeshield\" , ou de neutro concentrico, \"concentric\" . string outsider_diameter : Di\u00e2metro externo do cabo (in). rp : Resistividade do condutor fase (\u03a9/mi). GMRp : Raio m\u00e9dio geom\u00e9trico do condutor fase (ft). dp : Di\u00e2metro do condutor fase (in) k : N\u00famero de neutros conc\u00eantricos. rs : Resistividade do neutro conc\u00eantrico (\u03a9/mi). GMRs : Raio m\u00e9dio geom\u00e9trico do condutor fase (ft). ds : Di\u00e2metro do neutro conc\u00eantrico (in). T : \u00c9 a espessura da blindagem (mil)","title":"Condutores para linhas subterr\u00e2neas"},{"location":"linhas/#exemplos","text":"from mygrid.grid import Under_Ground_Conductor conduct4 = Under_Ground_Conductor(outsider_diameter=1.29, rp=0.4100, GMRp=0.0171, dp=0.567, k=13, rs=14.87, GMRs=0.00208, ds=0.0641, ampacity=None) conduct5 = Under_Ground_Conductor(type=\"tapeshield\", rp=0.97, GMRp=0.0111, dp=0.368, ds=0.88, T=5)","title":"Exemplos:"},{"location":"linhas/#linhas-subterraneas","text":"No MyGrid \u00e9 poss\u00edvel modelos linhas subterr\u00e2neas com cabo blindado ou de neutro conc\u00eantrico. class UnderGroundLine(LineModel): def __init__(self, loc=[], conductor=None, phasing=['a','b','c'], neutral_conductor=None, Transpose=False, units='Imperial', f=60, pg=100): Defini\u00e7\u00e3o dos par\u00e2metros: loc : Posi\u00e7\u00f5es dos condutores presentes na linha. list neutral : Indica a exist\u00eancia de neutro. boolean conductor : Inst\u00e2ncia do condutor Fase. UnderGroundLine neutral_conductor : Inst\u00e2ncia do condutor Neutro. Conductor phasing : Indica a que fase ou neutro, pertence as posi\u00e7\u00f5es dadas em loc . list units : Define em qual unidade, 'Imperial' ou 'SI' , deve se calcular a imped\u00e2ncia s\u00e9rie e admit\u00e2ncia shunt da linha. string f : Frequ\u00eancia da linha (Hz). float pg : Resistividade do solo (\u03a9.m). float","title":"Linhas Subterr\u00e2neas"},{"location":"linhas/#exemplos_1","text":"line606 = UnderGroundLine(loc=spacing515, phasing=['a','b','c'], conductor=conduct4) line607 = UnderGroundLine(loc=spacing520, phasing=['a', 'n'], conductor=conduct5, neutral_conductor=conduct6)","title":"Exemplos:"},{"location":"linhas/#referencias","text":"[1] - KERSTING, W. H. Distribution System Modeling and Analysis. 3. ed. [S.l.]: CRC Press, 2012. [2] - KERSTING, W. H. Radial distribution test feeders. v. 2, p. 908\u2013912 vol.2, Jan 2001.","title":"Refer\u00eancias"},{"location":"no/","text":"Genera\u00e7\u00e3o Distribu\u00edda class Generation(object): def __init__(self,name, Pa=0.0+0.0j, Pb=0.0+0.0j, Pc=0.0+0.0j, P=None, Qmin=0.0+0.0j, Qmax=0.0+0.0j, generation_type=\"PQ\", type_connection=\"wye\", Z=None) Defini\u00e7\u00e3o dos par\u00e2metros: name : Nome do n\u00f3. Obrigat\u00f3rio. string ppa : Pot\u00eancia da fase a (W+jVar). Usado somente quando power \u00e9 do tipo None . float ppb : Pot\u00eancia da fase b (W+jVar). Usado somente quando power \u00e9 do tipo None . float ppc : Pot\u00eancia da fase c (W+jVar). Usado somente quando power \u00e9 do tipo None . float power : Pot\u00eancia trif\u00e1sica (W+jVar). float Qmin : Pot\u00eancia Reativa m\u00ednima (p.u.). float Qmax : Pot\u00eancia Reativa m\u00e1xima (p.u.). float generation_type : Tipo de gera\u00e7\u00e3o, \"PQ ou \"PV\" . `string type_connection : Define o tipo de conex\u00e3o, \"wye\" para estrela e \"delta\" para conex\u00e3o delta. string Z : Imped\u00e2ncia interna da gera\u00e7\u00e3o. numpy.ndarray Exemplo: from mygrid.grid import Generation Z = np.eye(3, dtype=complex)*(15+100j) b2_PV = Generation(name=\"b2_PV\", P=0e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=0.98, DV_presc=0.0002, generation_type=\"PV\", Z=Z) aa1_PQ = Generation(name=\"aa1_PV\", Pa=4.0e3-2.62e3j, Pb=4.0e3-2.62e3j, Pc=4.0e3-2.62e3j, generation_type=\"PQ\", Z=Z) Capacitores Shunt class Shunt_Capacitor(object): def __init__(self, vll, Qa, Qb, Qc, type_connection): Defini\u00e7\u00e3o dos par\u00e2metros: vll : Tens\u00e3o de linha. float Qa : Pot\u00eancia reativa capacitiva na fase a . float Qb : Pot\u00eancia reativa capacitiva na fase b . float Qc : Pot\u00eancia reativa capacitiva na fase c . float type_connection : Define o tipo de conex\u00e3o, \"wye\" para estrela e \"delta\" para conex\u00e3o delta. string Exemplo: from mygrid.grid import Shunt_Capacitor capacitor_675 = Shunt_Capacitor(vll=4.16e3, Qa=200e3, Qb=200e3, Qc=200e3, type_connection=\"wye\") capacitor_611 = Shunt_Capacitor(vll=4.16e3, Qa=0.0e3, Qb=0.0e3, Qc=100e3, type_connection=\"wye\") N\u00f3s de Carga/Passagem class LoadNode(object): def __init__(self, name, power=None, ppa=0.0+0.0j, ppb=0.0+0.0j, ppc=0.0+0.0j, voltage=0.0+0.0j, Vmin=0.98, Vmax=1.05, Vspecified=1.0, DV_presc=0.002, generation=None, type_connection=\"wye\", shunt_capacitor=None, external_grid=None, zipmodel=[1.0, 0.0, 0.0]) Defini\u00e7\u00e3o dos par\u00e2metros: name : Nome do n\u00f3. Obrigat\u00f3rio. string power : Pot\u00eancia trif\u00e1sica (W+jVar). float ppa : Pot\u00eancia da fase a (W+jVar). Usado somente quando power \u00e9 do tipo None . float ppb : Pot\u00eancia da fase b (W+jVar). Usado somente quando power \u00e9 do tipo None . float ppc : Pot\u00eancia da fase c (W+jVar). Usado somente quando power \u00e9 do tipo None . float voltage : Tens\u00e3o no N\u00f3 (V). float Vmin : Tens\u00e3o m\u00ednima (p.u.). float Vmax : Tens\u00e3o m\u00e1xima (p.u.). float Vspecified : Tens\u00e3o alvo para gera\u00e7\u00e3o PV. `float DV_presc : Precis\u00e3o m\u00ednima para converg\u00eancia da gera\u00e7\u00e3o PV. ``float generation : Gera\u00e7\u00e3o distribu\u00edda. Generation type_connection : Define o tipo de conex\u00e3o, \"wye\" para estrela e \"delta\" para conex\u00e3o delta. string shunt_capacitor : Capacitor shunt. Shunt_Capacitor external_grid : Rede externa. Usada para o n\u00f3 ra\u00edz. ExternalGrid zipmodel : Modelo zip [Pot\u00eancia constante, Imped\u00e2ncia constante, Corrente constante]. list Exemplo: from mygrid.grid import LoadNode from mygrid.util import p2r, r2p vll_mt = p2r(13.8e3, 0.0) vll_bt = p2r(380.0, 0.0) Load_Node675 = LoadNode(name='675', ppa=485.0e3 + 190.0e3j, ppb=68.0e3 + 60.0e3j, ppc=290.0e3 + 212.0e3j, type_connection=\"wye\", shunt_capacitor=capacitor_675, zipmodel=[1.0, 0.0, 0.0], voltage=vll_mt) b2 = LoadNode(name='B2', generation = b2_PV, power=150.0e3 + 110.0e3j, voltage=vll_mt) aa3 = LoadNode(name='AA3', generation=aa1_PQ, power=20.0e3 + 5.0e3j, voltage=vll_bt)","title":"N\u00f3s de Carga/Passagem, Genera\u00e7\u00e3o Distribu\u00edda e Capacitores Shunt"},{"location":"no/#generacao-distribuida","text":"class Generation(object): def __init__(self,name, Pa=0.0+0.0j, Pb=0.0+0.0j, Pc=0.0+0.0j, P=None, Qmin=0.0+0.0j, Qmax=0.0+0.0j, generation_type=\"PQ\", type_connection=\"wye\", Z=None) Defini\u00e7\u00e3o dos par\u00e2metros: name : Nome do n\u00f3. Obrigat\u00f3rio. string ppa : Pot\u00eancia da fase a (W+jVar). Usado somente quando power \u00e9 do tipo None . float ppb : Pot\u00eancia da fase b (W+jVar). Usado somente quando power \u00e9 do tipo None . float ppc : Pot\u00eancia da fase c (W+jVar). Usado somente quando power \u00e9 do tipo None . float power : Pot\u00eancia trif\u00e1sica (W+jVar). float Qmin : Pot\u00eancia Reativa m\u00ednima (p.u.). float Qmax : Pot\u00eancia Reativa m\u00e1xima (p.u.). float generation_type : Tipo de gera\u00e7\u00e3o, \"PQ ou \"PV\" . `string type_connection : Define o tipo de conex\u00e3o, \"wye\" para estrela e \"delta\" para conex\u00e3o delta. string Z : Imped\u00e2ncia interna da gera\u00e7\u00e3o. numpy.ndarray","title":"Genera\u00e7\u00e3o Distribu\u00edda"},{"location":"no/#exemplo","text":"from mygrid.grid import Generation Z = np.eye(3, dtype=complex)*(15+100j) b2_PV = Generation(name=\"b2_PV\", P=0e3+0j, Qmin=-200.0e3j, Qmax=200.0e3j, Vmin=0.975, Vmax=1.05, Vspecified=0.98, DV_presc=0.0002, generation_type=\"PV\", Z=Z) aa1_PQ = Generation(name=\"aa1_PV\", Pa=4.0e3-2.62e3j, Pb=4.0e3-2.62e3j, Pc=4.0e3-2.62e3j, generation_type=\"PQ\", Z=Z)","title":"Exemplo:"},{"location":"no/#capacitores-shunt","text":"class Shunt_Capacitor(object): def __init__(self, vll, Qa, Qb, Qc, type_connection): Defini\u00e7\u00e3o dos par\u00e2metros: vll : Tens\u00e3o de linha. float Qa : Pot\u00eancia reativa capacitiva na fase a . float Qb : Pot\u00eancia reativa capacitiva na fase b . float Qc : Pot\u00eancia reativa capacitiva na fase c . float type_connection : Define o tipo de conex\u00e3o, \"wye\" para estrela e \"delta\" para conex\u00e3o delta. string","title":"Capacitores Shunt"},{"location":"no/#exemplo_1","text":"from mygrid.grid import Shunt_Capacitor capacitor_675 = Shunt_Capacitor(vll=4.16e3, Qa=200e3, Qb=200e3, Qc=200e3, type_connection=\"wye\") capacitor_611 = Shunt_Capacitor(vll=4.16e3, Qa=0.0e3, Qb=0.0e3, Qc=100e3, type_connection=\"wye\")","title":"Exemplo:"},{"location":"no/#nos-de-cargapassagem","text":"class LoadNode(object): def __init__(self, name, power=None, ppa=0.0+0.0j, ppb=0.0+0.0j, ppc=0.0+0.0j, voltage=0.0+0.0j, Vmin=0.98, Vmax=1.05, Vspecified=1.0, DV_presc=0.002, generation=None, type_connection=\"wye\", shunt_capacitor=None, external_grid=None, zipmodel=[1.0, 0.0, 0.0]) Defini\u00e7\u00e3o dos par\u00e2metros: name : Nome do n\u00f3. Obrigat\u00f3rio. string power : Pot\u00eancia trif\u00e1sica (W+jVar). float ppa : Pot\u00eancia da fase a (W+jVar). Usado somente quando power \u00e9 do tipo None . float ppb : Pot\u00eancia da fase b (W+jVar). Usado somente quando power \u00e9 do tipo None . float ppc : Pot\u00eancia da fase c (W+jVar). Usado somente quando power \u00e9 do tipo None . float voltage : Tens\u00e3o no N\u00f3 (V). float Vmin : Tens\u00e3o m\u00ednima (p.u.). float Vmax : Tens\u00e3o m\u00e1xima (p.u.). float Vspecified : Tens\u00e3o alvo para gera\u00e7\u00e3o PV. `float DV_presc : Precis\u00e3o m\u00ednima para converg\u00eancia da gera\u00e7\u00e3o PV. ``float generation : Gera\u00e7\u00e3o distribu\u00edda. Generation type_connection : Define o tipo de conex\u00e3o, \"wye\" para estrela e \"delta\" para conex\u00e3o delta. string shunt_capacitor : Capacitor shunt. Shunt_Capacitor external_grid : Rede externa. Usada para o n\u00f3 ra\u00edz. ExternalGrid zipmodel : Modelo zip [Pot\u00eancia constante, Imped\u00e2ncia constante, Corrente constante]. list","title":"N\u00f3s de Carga/Passagem"},{"location":"no/#exemplo_2","text":"from mygrid.grid import LoadNode from mygrid.util import p2r, r2p vll_mt = p2r(13.8e3, 0.0) vll_bt = p2r(380.0, 0.0) Load_Node675 = LoadNode(name='675', ppa=485.0e3 + 190.0e3j, ppb=68.0e3 + 60.0e3j, ppc=290.0e3 + 212.0e3j, type_connection=\"wye\", shunt_capacitor=capacitor_675, zipmodel=[1.0, 0.0, 0.0], voltage=vll_mt) b2 = LoadNode(name='B2', generation = b2_PV, power=150.0e3 + 110.0e3j, voltage=vll_mt) aa3 = LoadNode(name='AA3', generation=aa1_PQ, power=20.0e3 + 5.0e3j, voltage=vll_bt)","title":"Exemplo:"},{"location":"reguladores/","text":"Auto-Transformador Apenas o auto-transformador elevador do Tipo B, em conex\u00e3o estrela-estrela, est\u00e1 disponivel para uso. A sua modelagem segue a que foi dado por kersting no cap\u00edtulo 7 do livro Distribution System Modeling and Analysis : Defini\u00e7\u00e3o dos par\u00e2metros: class Auto_TransformerModel(object): def __init__(self, name, step, tap_max, voltage, vhold=122, Npt = 20, connection='YY', tap_a=None, tap_b=None, tap_c=None, CTP=None, R=None, X=None, r=None, x=None): name : Nome do auto-transdormador. step : Passo do comutador (V). tap_max : Quantidade m\u00e1xima de comuta\u00e7\u00f5es. voltage : Tens\u00e3o de linha nominal do auto-transformador (V). vhold : Tens\u00e3o alvo do compensador (V). Npt : Rela\u00e7\u00e3o de transforma\u00e7\u00e3o do TP. tap_a : TAP na fase a definido manualmente (p.u). tap_b : TAP na fase b definido manualmente (p.u). tap_c : TAP na fase c definido manualmente (p.u). CTP : Rela\u00e7\u00e3o de transforma\u00e7\u00e3o do TC. R : 'R' do compensador de linha (V). X : 'X' do compensador de linha (V). r : 'r' do compensador de linha (\u03a9). x : 'x' do compensador de linha (\u03a9). Se R e X forem definidos r e x n\u00e3o seram considerados, caso nenhum desses pares seja definido o auto-transformador n\u00e3o funcionar\u00e1 com compensador de linha, ou seja, ser\u00e1 manual. Exemplo: Auto-transformador presente na rede teste IEEE 13 Barras . from mygrid.grid import Auto_TransformerModel auto_650 = Auto_TransformerModel(name=\"auto_t1_650\", step=0.75, tap_max=32, vhold=122, voltage=4.16e3, R=3, X=9, CTP=700, Npt=20) Refer\u00eancias [1] - KERSTING, W. H. Distribution System Modeling and Analysis . 3. ed. [S.l.]: CRC Press, 2012. [2] - KERSTING, W. H. Radial distribution test feeders. v. 2, p. 908\u2013912 vol.2, Jan 2001.","title":"Reguladores"},{"location":"reguladores/#auto-transformador","text":"Apenas o auto-transformador elevador do Tipo B, em conex\u00e3o estrela-estrela, est\u00e1 disponivel para uso. A sua modelagem segue a que foi dado por kersting no cap\u00edtulo 7 do livro Distribution System Modeling and Analysis : Defini\u00e7\u00e3o dos par\u00e2metros: class Auto_TransformerModel(object): def __init__(self, name, step, tap_max, voltage, vhold=122, Npt = 20, connection='YY', tap_a=None, tap_b=None, tap_c=None, CTP=None, R=None, X=None, r=None, x=None): name : Nome do auto-transdormador. step : Passo do comutador (V). tap_max : Quantidade m\u00e1xima de comuta\u00e7\u00f5es. voltage : Tens\u00e3o de linha nominal do auto-transformador (V). vhold : Tens\u00e3o alvo do compensador (V). Npt : Rela\u00e7\u00e3o de transforma\u00e7\u00e3o do TP. tap_a : TAP na fase a definido manualmente (p.u). tap_b : TAP na fase b definido manualmente (p.u). tap_c : TAP na fase c definido manualmente (p.u). CTP : Rela\u00e7\u00e3o de transforma\u00e7\u00e3o do TC. R : 'R' do compensador de linha (V). X : 'X' do compensador de linha (V). r : 'r' do compensador de linha (\u03a9). x : 'x' do compensador de linha (\u03a9). Se R e X forem definidos r e x n\u00e3o seram considerados, caso nenhum desses pares seja definido o auto-transformador n\u00e3o funcionar\u00e1 com compensador de linha, ou seja, ser\u00e1 manual.","title":"Auto-Transformador"},{"location":"reguladores/#exemplo","text":"Auto-transformador presente na rede teste IEEE 13 Barras . from mygrid.grid import Auto_TransformerModel auto_650 = Auto_TransformerModel(name=\"auto_t1_650\", step=0.75, tap_max=32, vhold=122, voltage=4.16e3, R=3, X=9, CTP=700, Npt=20)","title":"Exemplo:"},{"location":"reguladores/#referencias","text":"[1] - KERSTING, W. H. Distribution System Modeling and Analysis . 3. ed. [S.l.]: CRC Press, 2012. [2] - KERSTING, W. H. Radial distribution test feeders. v. 2, p. 908\u2013912 vol.2, Jan 2001.","title":"Refer\u00eancias"},{"location":"transformadores/","text":"Transformadores Abaixadores Atualmente o MyGrid possui dois tipos de transformadores modelados conforme o cap\u00edtulo 8 do livro Distribution System Modeling and Analysis : Delta - Estrela aterrado; Estrela aterrado - Estrela aterrado. Defini\u00e7\u00e3o dos par\u00e2metros: class TransformerModel(object): def __init__(self, name, primary_voltage, secondary_voltage, power, impedance=None, R=5, X=5, connection='Dyn'): name : Nome do objeto transformador. Todos os transformadores devem possuir nomes diferentes. primary_voltage : Tens\u00e3o prim\u00e1ria do transformador (V). secondary_voltage : Tens\u00e3o secund\u00e1ria do transformador (V): power : Pot\u00eancia do transformador (V.A). impedance : Impend\u00e2ncia complexa do transformador (\u03a9). R e X : S\u00e3o, respectivamente, resist\u00eancia e reat\u00e2ncia em % (p.u x 100). Caso o valor de impedance seja None os valores de R e X ser\u00e3o usados para computar a imped\u00e2ncia do transformador. connection : Define o tipo de conex\u00e3o do transformador. Conex\u00f5es dispon\u00edveis: Dyn - Delta-Estrela Aterrado nyyn - Estrela Aterrado-Estrela Aterrado Exemplos: A seguir segue dois exemplos de transformadores modelados no MyGrid. Ambos s\u00e3o usados na rede teste IEEE 13 Barras . Importando bibliotecas: from mygrid.util import p2r, r2p from mygrid.grid import TransformerModel Tens\u00f5es: vll_ht = p2r(115e3, 0.0) vll_mt = p2r(4.16e3, 0.0) vll_bt = p2r(480.0, 0.0) Criando inst\u00e2ncias dos transformadores: tf_Substation_t1 = TransformerModel(name=\"Substation_T1\", primary_voltage=vll_ht, secondary_voltage=vll_mt, power=5000e3, connection='Dyn', R=1, X=8) tf_XFM_1t1 = TransformerModel(name=\"XMF_1\", primary_voltage=vll_mt, secondary_voltage=vll_bt, connection='nyyn', power=500e3, R=1.1, X=2) Refer\u00eancias [1] - KERSTING, W. H. Distribution System Modeling and Analysis . 3. ed. [S.l.]: CRC Press, 2012. [2] - KERSTING, W. H. Radial distribution test feeders. v. 2, p. 908\u2013912 vol.2, Jan 2001.","title":"Transformadores"},{"location":"transformadores/#transformadores-abaixadores","text":"Atualmente o MyGrid possui dois tipos de transformadores modelados conforme o cap\u00edtulo 8 do livro Distribution System Modeling and Analysis : Delta - Estrela aterrado; Estrela aterrado - Estrela aterrado. Defini\u00e7\u00e3o dos par\u00e2metros: class TransformerModel(object): def __init__(self, name, primary_voltage, secondary_voltage, power, impedance=None, R=5, X=5, connection='Dyn'): name : Nome do objeto transformador. Todos os transformadores devem possuir nomes diferentes. primary_voltage : Tens\u00e3o prim\u00e1ria do transformador (V). secondary_voltage : Tens\u00e3o secund\u00e1ria do transformador (V): power : Pot\u00eancia do transformador (V.A). impedance : Impend\u00e2ncia complexa do transformador (\u03a9). R e X : S\u00e3o, respectivamente, resist\u00eancia e reat\u00e2ncia em % (p.u x 100). Caso o valor de impedance seja None os valores de R e X ser\u00e3o usados para computar a imped\u00e2ncia do transformador. connection : Define o tipo de conex\u00e3o do transformador. Conex\u00f5es dispon\u00edveis: Dyn - Delta-Estrela Aterrado nyyn - Estrela Aterrado-Estrela Aterrado","title":"Transformadores Abaixadores"},{"location":"transformadores/#exemplos","text":"A seguir segue dois exemplos de transformadores modelados no MyGrid. Ambos s\u00e3o usados na rede teste IEEE 13 Barras . Importando bibliotecas: from mygrid.util import p2r, r2p from mygrid.grid import TransformerModel Tens\u00f5es: vll_ht = p2r(115e3, 0.0) vll_mt = p2r(4.16e3, 0.0) vll_bt = p2r(480.0, 0.0) Criando inst\u00e2ncias dos transformadores: tf_Substation_t1 = TransformerModel(name=\"Substation_T1\", primary_voltage=vll_ht, secondary_voltage=vll_mt, power=5000e3, connection='Dyn', R=1, X=8) tf_XFM_1t1 = TransformerModel(name=\"XMF_1\", primary_voltage=vll_mt, secondary_voltage=vll_bt, connection='nyyn', power=500e3, R=1.1, X=2)","title":"Exemplos:"},{"location":"trechos/","text":"Trechos Trechos s\u00e3o usados para representar linha el\u00e9trica, transformadores e reguladores de tens\u00e3o, podendo conter tamb\u00e9m uma chave caso represente uma linha. class Section(Edge): def __init__(self, name, n1, n2, switch=None, transformer=None, line_model=None, length=None): Defini\u00e7\u00e3o dos par\u00e2metros: name : Nome do trecho. Obrigat\u00f3rio. n1 : N\u00f3 de inicio do trecho. n2 : N\u00f3 de t\u00e9rmino do trecho. switch : Chave do trecho, caso exista alguma. transformer : Transformador do trecho. Caso este argumento n\u00e3o seja None o trecho representar\u00e1 exclusivamente o transformador passado. line_model : Modelo de linha. length : Comprimento da linha el\u00e9trica em milhas ou km (Depende da unidade usado no modelo de linha). Exemplo: from mygrid.grid import Switch, LineModel, UnderGroundLine from mygrid.grid import Under_Ground_Conductor from mygrid.grid import Section, LoadNode, TransformerModel, Conductor from mygrid.grid import Auto_TransformerModel from mygrid.util import p2r, r2p vll_mt = p2r(4.16e3, 0.0) spacing500=[0.0 + 28.0j, 2.5 + 28.0j, 7.0 + 28.0j, 4.0 + 24.0j] conduct2 = Conductor(id=44) line602 = LineModel(loc=spacing500, phasing=['c','a','b','n'], conductor=conduct2, neutral_conductor=conduct2) Load_Node632 = LoadNode(name='632', ppa=0.0e3 + 0.0e3j, ppb=0.0e3 + 0.0e3j, ppc=0.0e3 + 0.0e3j, type_connection=\"wye\", zipmodel=[1.0, 0.0, 0.0], voltage=vll_mt) Load_Node633 = LoadNode(name='633', voltage=vll_mt) Load_Node632_to_Load_Node633 = Section(name='section4', n1=Load_Node632, n2=Load_Node633, line_model=line602, length=500/5280)","title":"Trechos"},{"location":"trechos/#trechos","text":"Trechos s\u00e3o usados para representar linha el\u00e9trica, transformadores e reguladores de tens\u00e3o, podendo conter tamb\u00e9m uma chave caso represente uma linha. class Section(Edge): def __init__(self, name, n1, n2, switch=None, transformer=None, line_model=None, length=None): Defini\u00e7\u00e3o dos par\u00e2metros: name : Nome do trecho. Obrigat\u00f3rio. n1 : N\u00f3 de inicio do trecho. n2 : N\u00f3 de t\u00e9rmino do trecho. switch : Chave do trecho, caso exista alguma. transformer : Transformador do trecho. Caso este argumento n\u00e3o seja None o trecho representar\u00e1 exclusivamente o transformador passado. line_model : Modelo de linha. length : Comprimento da linha el\u00e9trica em milhas ou km (Depende da unidade usado no modelo de linha).","title":"Trechos"},{"location":"trechos/#exemplo","text":"from mygrid.grid import Switch, LineModel, UnderGroundLine from mygrid.grid import Under_Ground_Conductor from mygrid.grid import Section, LoadNode, TransformerModel, Conductor from mygrid.grid import Auto_TransformerModel from mygrid.util import p2r, r2p vll_mt = p2r(4.16e3, 0.0) spacing500=[0.0 + 28.0j, 2.5 + 28.0j, 7.0 + 28.0j, 4.0 + 24.0j] conduct2 = Conductor(id=44) line602 = LineModel(loc=spacing500, phasing=['c','a','b','n'], conductor=conduct2, neutral_conductor=conduct2) Load_Node632 = LoadNode(name='632', ppa=0.0e3 + 0.0e3j, ppb=0.0e3 + 0.0e3j, ppc=0.0e3 + 0.0e3j, type_connection=\"wye\", zipmodel=[1.0, 0.0, 0.0], voltage=vll_mt) Load_Node633 = LoadNode(name='633', voltage=vll_mt) Load_Node632_to_Load_Node633 = Section(name='section4', n1=Load_Node632, n2=Load_Node633, line_model=line602, length=500/5280)","title":"Exemplo:"}]}